// Generated by jextract

package top.dreamlike.nativeLib.flock;

import top.dreamlike.common.CType;
import top.dreamlike.helper.RuntimeHelper;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

public class file_h {

    /* package-private */ file_h() {
    }



    public static int F_GETLK64() {
        return (int) 5L;
    }

    public static int F_SETLK64() {
        return (int) 6L;
    }

    public static int F_SETLKW64() {
        return (int) 7L;
    }

    public static int O_ACCMODE() {
        return (int) 3L;
    }

    public static int O_RDONLY() {
        return (int) 0L;
    }

    public static int O_WRONLY() {
        return (int) 1L;
    }

    public static int O_RDWR() {
        return (int) 2L;
    }

    public static int O_CREAT() {
        return (int) 64L;
    }

    public static int O_EXCL() {
        return (int) 128L;
    }

    public static int O_NOCTTY() {
        return (int) 256L;
    }

    public static int O_TRUNC() {
        return (int) 512L;
    }

    public static int O_APPEND() {
        return (int) 1024L;
    }

    public static int O_NONBLOCK() {
        return (int) 2048L;
    }

    public static int O_SYNC() {
        return (int) 1052672L;
    }

    public static int O_ASYNC() {
        return (int) 8192L;
    }

    public static int __O_DIRECTORY() {
        return (int) 65536L;
    }

    public static int __O_NOFOLLOW() {
        return (int) 131072L;
    }

    public static int __O_CLOEXEC() {
        return (int) 524288L;
    }

    public static int __O_DIRECT() {
        return (int) 16384L;
    }

    public static int __O_NOATIME() {
        return (int) 262144L;
    }

    public static int __O_PATH() {
        return (int) 2097152L;
    }

    public static int __O_DSYNC() {
        return (int) 4096L;
    }

    public static int F_GETLK() {
        return (int) 5L;
    }

    public static int F_SETLK() {
        return (int) 6L;
    }

    public static int F_SETLKW() {
        return (int) 7L;
    }

    public static int F_DUPFD() {
        return (int) 0L;
    }

    public static int F_GETFD() {
        return (int) 1L;
    }

    public static int F_SETFD() {
        return (int) 2L;
    }

    public static int F_GETFL() {
        return (int) 3L;
    }

    public static int F_SETFL() {
        return (int) 4L;
    }

    public static int __F_SETOWN() {
        return (int) 8L;
    }

    public static int __F_GETOWN() {
        return (int) 9L;
    }

    public static int __F_SETSIG() {
        return (int) 10L;
    }

    public static int __F_GETSIG() {
        return (int) 11L;
    }

    public static int __F_SETOWN_EX() {
        return (int) 15L;
    }

    public static int __F_GETOWN_EX() {
        return (int) 16L;
    }

    public static int F_DUPFD_CLOEXEC() {
        return (int) 1030L;
    }

    public static int FD_CLOEXEC() {
        return (int) 1L;
    }

    public static int F_RDLCK() {
        return (int) 0L;
    }

    public static int F_WRLCK() {
        return (int) 1L;
    }

    public static int F_UNLCK() {
        return (int) 2L;
    }

    public static int F_EXLCK() {
        return (int) 4L;
    }

    public static int F_SHLCK() {
        return (int) 8L;
    }

    public static int LOCK_SH() {
        return (int) 1L;
    }

    public static int LOCK_EX() {
        return (int) 2L;
    }

    public static int LOCK_NB() {
        return (int) 4L;
    }

    public static int LOCK_UN() {
        return (int) 8L;
    }

    public static int __POSIX_FADV_DONTNEED() {
        return (int) 4L;
    }

    public static int __POSIX_FADV_NOREUSE() {
        return (int) 5L;
    }

    public static int POSIX_FADV_NORMAL() {
        return (int) 0L;
    }

    public static int POSIX_FADV_RANDOM() {
        return (int) 1L;
    }

    public static int POSIX_FADV_SEQUENTIAL() {
        return (int) 2L;
    }

    public static int POSIX_FADV_WILLNEED() {
        return (int) 3L;
    }

    public static int AT_SYMLINK_NOFOLLOW() {
        return (int) 256L;
    }

    public static int AT_REMOVEDIR() {
        return (int) 512L;
    }

    public static int AT_SYMLINK_FOLLOW() {
        return (int) 1024L;
    }

    public static int AT_EACCESS() {
        return (int) 512L;
    }

    public static int _STRUCT_TIMESPEC() {
        return (int) 1L;
    }

    public static int _BITS_ENDIAN_H() {
        return (int) 1L;
    }

    public static int __LITTLE_ENDIAN() {
        return (int) 1234L;
    }

    public static int __BIG_ENDIAN() {
        return (int) 4321L;
    }

    public static int __PDP_ENDIAN() {
        return (int) 3412L;
    }

    public static int _BITS_ENDIANNESS_H() {
        return (int) 1L;
    }

    public static int _BITS_STAT_H() {
        return (int) 1L;
    }

    public static int _STAT_VER_KERNEL() {
        return (int) 0L;
    }

    public static int _STAT_VER_LINUX() {
        return (int) 1L;
    }

    public static int _MKNOD_VER_LINUX() {
        return (int) 0L;
    }

    public static int __S_IFMT() {
        return (int) 61440L;
    }

    public static int __S_IFDIR() {
        return (int) 16384L;
    }

    public static int __S_IFCHR() {
        return (int) 8192L;
    }

    public static int __S_IFBLK() {
        return (int) 24576L;
    }

    public static int __S_IFREG() {
        return (int) 32768L;
    }

    public static int __S_IFIFO() {
        return (int) 4096L;
    }

    public static int __S_IFLNK() {
        return (int) 40960L;
    }

    public static int __S_IFSOCK() {
        return (int) 49152L;
    }

    public static int __S_ISUID() {
        return (int) 2048L;
    }

    public static int __S_ISGID() {
        return (int) 1024L;
    }

    public static int __S_ISVTX() {
        return (int) 512L;
    }

    public static int __S_IREAD() {
        return (int) 256L;
    }

    public static int __S_IWRITE() {
        return (int) 128L;
    }

    public static int __S_IEXEC() {
        return (int) 64L;
    }

    public static int R_OK() {
        return (int) 4L;
    }

    public static int W_OK() {
        return (int) 2L;
    }

    public static int X_OK() {
        return (int) 1L;
    }

    public static int F_OK() {
        return (int) 0L;
    }

    public static int SEEK_SET() {
        return (int) 0L;
    }

    public static int SEEK_CUR() {
        return (int) 1L;
    }

    public static int SEEK_END() {
        return (int) 2L;
    }

    public static int F_ULOCK() {
        return (int) 0L;
    }

    public static int F_LOCK() {
        return (int) 1L;
    }

    public static int F_TLOCK() {
        return (int) 2L;
    }

    public static int F_TEST() {
        return (int) 3L;
    }

    public static int L_SET() {
        return (int) 0L;
    }

    public static int L_INCR() {
        return (int) 1L;
    }

    public static int L_XTND() {
        return (int) 2L;
    }

    public static OfLong off_t = CType.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = CType.C_INT$LAYOUT;

    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$0.fcntl$MH, "fcntl");
    }

    public static int fcntl(int __fd, int __cmd, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int) mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$0.open$MH, "open");
    }

    public static int open(MemorySegment __file, int __oflag, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int) mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.openat$MH, "openat");
    }

    public static int openat(int __fd, MemorySegment __file, int __oflag, Object... x3) {
        var mh$ = openat$MH();
        try {
            return (int) mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.creat$MH, "creat");
    }

    public static int creat(MemorySegment __file, int __mode) {
        var mh$ = creat$MH();
        try {
            return (int) mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$0.lockf$MH, "lockf");
    }

    public static int lockf(int __fd, int __cmd, long __len) {
        var mh$ = lockf$MH();
        try {
            return (int) mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle posix_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$0.posix_fadvise$MH, "posix_fadvise");
    }

    public static int posix_fadvise(int __fd, long __offset, long __len, int __advise) {
        var mh$ = posix_fadvise$MH();
        try {
            return (int) mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle posix_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$1.posix_fallocate$MH, "posix_fallocate");
    }

    public static int posix_fallocate(int __fd, long __offset, long __len) {
        var mh$ = posix_fallocate$MH();
        try {
            return (int) mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle flock$MH() {
        return RuntimeHelper.requireNonNull(constants$1.flock$MH, "flock");
    }

    public static int flock(int __fd, int __operation) {
        var mh$ = flock$MH();
        try {
            return (int) mh$.invokeExact(__fd, __operation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }



    public static int O_NDELAY() {
        return (int) 2048L;
    }

    public static int O_FSYNC() {
        return (int) 1052672L;
    }

    public static int __O_TMPFILE() {
        return (int) 4259840L;
    }

    public static int O_DIRECTORY() {
        return (int) 65536L;
    }

    public static int O_NOFOLLOW() {
        return (int) 131072L;
    }

    public static int O_CLOEXEC() {
        return (int) 524288L;
    }

    public static int O_DSYNC() {
        return (int) 4096L;
    }

    public static int O_RSYNC() {
        return (int) 1052672L;
    }

    public static int F_SETOWN() {
        return (int) 8L;
    }

    public static int F_GETOWN() {
        return (int) 9L;
    }

    public static int FAPPEND() {
        return (int) 1024L;
    }

    public static int FFSYNC() {
        return (int) 1052672L;
    }

    public static int FASYNC() {
        return (int) 8192L;
    }

    public static int FNONBLOCK() {
        return (int) 2048L;
    }

    public static int FNDELAY() {
        return (int) 2048L;
    }

    public static int POSIX_FADV_DONTNEED() {
        return (int) 4L;
    }

    public static int POSIX_FADV_NOREUSE() {
        return (int) 5L;
    }

    public static int AT_FDCWD() {
        return (int) -100L;
    }

    public static int __BYTE_ORDER() {
        return (int) 1234L;
    }

    public static int __FLOAT_WORD_ORDER() {
        return (int) 1234L;
    }

    public static int _STAT_VER() {
        return (int) 1L;
    }

    public static long UTIME_NOW() {
        return 1073741823L;
    }

    public static long UTIME_OMIT() {
        return 1073741822L;
    }

    public static int S_IFMT() {
        return (int) 61440L;
    }

    public static int S_IFDIR() {
        return (int) 16384L;
    }

    public static int S_IFCHR() {
        return (int) 8192L;
    }

    public static int S_IFBLK() {
        return (int) 24576L;
    }

    public static int S_IFREG() {
        return (int) 32768L;
    }

    public static int S_IFIFO() {
        return (int) 4096L;
    }

    public static int S_IFLNK() {
        return (int) 40960L;
    }

    public static int S_IFSOCK() {
        return (int) 49152L;
    }

    public static int S_ISUID() {
        return (int) 2048L;
    }

    public static int S_ISGID() {
        return (int) 1024L;
    }

    public static int S_ISVTX() {
        return (int) 512L;
    }

    public static int S_IRUSR() {
        return (int) 256L;
    }

    public static int S_IWUSR() {
        return (int) 128L;
    }

    public static int S_IXUSR() {
        return (int) 64L;
    }

    public static int S_IRWXU() {
        return (int) 448L;
    }

    public static int S_IRGRP() {
        return (int) 32L;
    }

    public static int S_IWGRP() {
        return (int) 16L;
    }

    public static int S_IXGRP() {
        return (int) 8L;
    }

    public static int S_IRWXG() {
        return (int) 56L;
    }

    public static int S_IROTH() {
        return (int) 4L;
    }

    public static int S_IWOTH() {
        return (int) 2L;
    }

    public static int S_IXOTH() {
        return (int) 1L;
    }

    public static int S_IRWXO() {
        return (int) 7L;
    }
}


