// Generated by jextract

package top.dreamlike.nativeLib.socket;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;

import static java.lang.foreign.ValueLayout.*;
public class socket_h  {

    /* package-private */ socket_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _SYS_SOCKET_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)31L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __LONG_DOUBLE_USES_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __iovec_defined() {
        return (int)1L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int PF_UNSPEC() {
        return (int)0L;
    }
    public static int PF_LOCAL() {
        return (int)1L;
    }
    public static int PF_INET() {
        return (int)2L;
    }
    public static int PF_AX25() {
        return (int)3L;
    }
    public static int PF_IPX() {
        return (int)4L;
    }
    public static int PF_APPLETALK() {
        return (int)5L;
    }
    public static int PF_NETROM() {
        return (int)6L;
    }
    public static int PF_BRIDGE() {
        return (int)7L;
    }
    public static int PF_ATMPVC() {
        return (int)8L;
    }
    public static int PF_X25() {
        return (int)9L;
    }
    public static int PF_INET6() {
        return (int)10L;
    }
    public static int PF_ROSE() {
        return (int)11L;
    }
    public static int PF_DECnet() {
        return (int)12L;
    }
    public static int PF_NETBEUI() {
        return (int)13L;
    }
    public static int PF_SECURITY() {
        return (int)14L;
    }
    public static int PF_KEY() {
        return (int)15L;
    }
    public static int PF_NETLINK() {
        return (int)16L;
    }
    public static int PF_PACKET() {
        return (int)17L;
    }
    public static int PF_ASH() {
        return (int)18L;
    }
    public static int PF_ECONET() {
        return (int)19L;
    }
    public static int PF_ATMSVC() {
        return (int)20L;
    }
    public static int PF_RDS() {
        return (int)21L;
    }
    public static int PF_SNA() {
        return (int)22L;
    }
    public static int PF_IRDA() {
        return (int)23L;
    }
    public static int PF_PPPOX() {
        return (int)24L;
    }
    public static int PF_WANPIPE() {
        return (int)25L;
    }
    public static int PF_LLC() {
        return (int)26L;
    }
    public static int PF_IB() {
        return (int)27L;
    }
    public static int PF_MPLS() {
        return (int)28L;
    }
    public static int PF_CAN() {
        return (int)29L;
    }
    public static int PF_TIPC() {
        return (int)30L;
    }
    public static int PF_BLUETOOTH() {
        return (int)31L;
    }
    public static int PF_IUCV() {
        return (int)32L;
    }
    public static int PF_RXRPC() {
        return (int)33L;
    }
    public static int PF_ISDN() {
        return (int)34L;
    }
    public static int PF_PHONET() {
        return (int)35L;
    }
    public static int PF_IEEE802154() {
        return (int)36L;
    }
    public static int PF_CAIF() {
        return (int)37L;
    }
    public static int PF_ALG() {
        return (int)38L;
    }
    public static int PF_NFC() {
        return (int)39L;
    }
    public static int PF_VSOCK() {
        return (int)40L;
    }
    public static int PF_KCM() {
        return (int)41L;
    }
    public static int PF_QIPCRTR() {
        return (int)42L;
    }
    public static int PF_SMC() {
        return (int)43L;
    }
    public static int PF_XDP() {
        return (int)44L;
    }
    public static int PF_MAX() {
        return (int)45L;
    }
    public static int SOL_RAW() {
        return (int)255L;
    }
    public static int SOL_DECNET() {
        return (int)261L;
    }
    public static int SOL_X25() {
        return (int)262L;
    }
    public static int SOL_PACKET() {
        return (int)263L;
    }
    public static int SOL_ATM() {
        return (int)264L;
    }
    public static int SOL_AAL() {
        return (int)265L;
    }
    public static int SOL_IRDA() {
        return (int)266L;
    }
    public static int SOL_NETBEUI() {
        return (int)267L;
    }
    public static int SOL_LLC() {
        return (int)268L;
    }
    public static int SOL_DCCP() {
        return (int)269L;
    }
    public static int SOL_NETLINK() {
        return (int)270L;
    }
    public static int SOL_TIPC() {
        return (int)271L;
    }
    public static int SOL_RXRPC() {
        return (int)272L;
    }
    public static int SOL_PPPOL2TP() {
        return (int)273L;
    }
    public static int SOL_BLUETOOTH() {
        return (int)274L;
    }
    public static int SOL_PNPIPE() {
        return (int)275L;
    }
    public static int SOL_RDS() {
        return (int)276L;
    }
    public static int SOL_IUCV() {
        return (int)277L;
    }
    public static int SOL_CAIF() {
        return (int)278L;
    }
    public static int SOL_ALG() {
        return (int)279L;
    }
    public static int SOL_NFC() {
        return (int)280L;
    }
    public static int SOL_KCM() {
        return (int)281L;
    }
    public static int SOL_TLS() {
        return (int)282L;
    }
    public static int SOL_XDP() {
        return (int)283L;
    }
    public static int SOMAXCONN() {
        return (int)4096L;
    }
    public static int _BITS_SOCKADDR_H() {
        return (int)1L;
    }
    public static int _SS_SIZE() {
        return (int)128L;
    }
    public static int __BITS_PER_LONG() {
        return (int)64L;
    }
    public static int FIOSETOWN() {
        return (int)35073L;
    }
    public static int SIOCSPGRP() {
        return (int)35074L;
    }
    public static int FIOGETOWN() {
        return (int)35075L;
    }
    public static int SIOCGPGRP() {
        return (int)35076L;
    }
    public static int SIOCATMARK() {
        return (int)35077L;
    }
    public static int SIOCGSTAMP_OLD() {
        return (int)35078L;
    }
    public static int SIOCGSTAMPNS_OLD() {
        return (int)35079L;
    }
    public static int SOL_SOCKET() {
        return (int)1L;
    }
    public static int SO_DEBUG() {
        return (int)1L;
    }
    public static int SO_REUSEADDR() {
        return (int)2L;
    }
    public static int SO_TYPE() {
        return (int)3L;
    }
    public static int SO_ERROR() {
        return (int)4L;
    }
    public static int SO_DONTROUTE() {
        return (int)5L;
    }
    public static int SO_BROADCAST() {
        return (int)6L;
    }
    public static int SO_SNDBUF() {
        return (int)7L;
    }
    public static int SO_RCVBUF() {
        return (int)8L;
    }
    public static int SO_SNDBUFFORCE() {
        return (int)32L;
    }
    public static int SO_RCVBUFFORCE() {
        return (int)33L;
    }
    public static int SO_KEEPALIVE() {
        return (int)9L;
    }
    public static int SO_OOBINLINE() {
        return (int)10L;
    }
    public static int SO_NO_CHECK() {
        return (int)11L;
    }
    public static int SO_PRIORITY() {
        return (int)12L;
    }
    public static int SO_LINGER() {
        return (int)13L;
    }
    public static int SO_BSDCOMPAT() {
        return (int)14L;
    }
    public static int SO_REUSEPORT() {
        return (int)15L;
    }
    public static int SO_PASSCRED() {
        return (int)16L;
    }
    public static int SO_PEERCRED() {
        return (int)17L;
    }
    public static int SO_RCVLOWAT() {
        return (int)18L;
    }
    public static int SO_SNDLOWAT() {
        return (int)19L;
    }
    public static int SO_RCVTIMEO_OLD() {
        return (int)20L;
    }
    public static int SO_SNDTIMEO_OLD() {
        return (int)21L;
    }
    public static int SO_SECURITY_AUTHENTICATION() {
        return (int)22L;
    }
    public static int SO_SECURITY_ENCRYPTION_TRANSPORT() {
        return (int)23L;
    }
    public static int SO_SECURITY_ENCRYPTION_NETWORK() {
        return (int)24L;
    }
    public static int SO_BINDTODEVICE() {
        return (int)25L;
    }
    public static int SO_ATTACH_FILTER() {
        return (int)26L;
    }
    public static int SO_DETACH_FILTER() {
        return (int)27L;
    }
    public static int SO_PEERNAME() {
        return (int)28L;
    }
    public static int SO_ACCEPTCONN() {
        return (int)30L;
    }
    public static int SO_PEERSEC() {
        return (int)31L;
    }
    public static int SO_PASSSEC() {
        return (int)34L;
    }
    public static int SO_MARK() {
        return (int)36L;
    }
    public static int SO_PROTOCOL() {
        return (int)38L;
    }
    public static int SO_DOMAIN() {
        return (int)39L;
    }
    public static int SO_RXQ_OVFL() {
        return (int)40L;
    }
    public static int SO_WIFI_STATUS() {
        return (int)41L;
    }
    public static int SO_PEEK_OFF() {
        return (int)42L;
    }
    public static int SO_NOFCS() {
        return (int)43L;
    }
    public static int SO_LOCK_FILTER() {
        return (int)44L;
    }
    public static int SO_SELECT_ERR_QUEUE() {
        return (int)45L;
    }
    public static int SO_BUSY_POLL() {
        return (int)46L;
    }
    public static int SO_MAX_PACING_RATE() {
        return (int)47L;
    }
    public static int SO_BPF_EXTENSIONS() {
        return (int)48L;
    }
    public static int SO_INCOMING_CPU() {
        return (int)49L;
    }
    public static int SO_ATTACH_BPF() {
        return (int)50L;
    }
    public static int SO_ATTACH_REUSEPORT_CBPF() {
        return (int)51L;
    }
    public static int SO_ATTACH_REUSEPORT_EBPF() {
        return (int)52L;
    }
    public static int SO_CNX_ADVICE() {
        return (int)53L;
    }
    public static int SCM_TIMESTAMPING_OPT_STATS() {
        return (int)54L;
    }
    public static int SO_MEMINFO() {
        return (int)55L;
    }
    public static int SO_INCOMING_NAPI_ID() {
        return (int)56L;
    }
    public static int SO_COOKIE() {
        return (int)57L;
    }
    public static int SCM_TIMESTAMPING_PKTINFO() {
        return (int)58L;
    }
    public static int SO_PEERGROUPS() {
        return (int)59L;
    }
    public static int SO_ZEROCOPY() {
        return (int)60L;
    }
    public static int SO_TXTIME() {
        return (int)61L;
    }
    public static int SO_BINDTOIFINDEX() {
        return (int)62L;
    }
    public static int SO_TIMESTAMP_OLD() {
        return (int)29L;
    }
    public static int SO_TIMESTAMPNS_OLD() {
        return (int)35L;
    }
    public static int SO_TIMESTAMPING_OLD() {
        return (int)37L;
    }
    public static int SO_TIMESTAMP_NEW() {
        return (int)63L;
    }
    public static int SO_TIMESTAMPNS_NEW() {
        return (int)64L;
    }
    public static int SO_TIMESTAMPING_NEW() {
        return (int)65L;
    }
    public static int SO_RCVTIMEO_NEW() {
        return (int)66L;
    }
    public static int SO_SNDTIMEO_NEW() {
        return (int)67L;
    }
    public static int SO_DETACH_REUSEPORT_BPF() {
        return (int)68L;
    }
    public static int __osockaddr_defined() {
        return (int)1L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;

    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1.select$MH, "select");
    }

    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int) mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pselect$MH, "pselect");
    }

    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int) mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    public static int SOCK_RAW() {
        return (int)3L;
    }
    public static int SOCK_RDM() {
        return (int)4L;
    }
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    public static int SOCK_DCCP() {
        return (int)6L;
    }
    public static int SOCK_PACKET() {
        return (int)10L;
    }
    public static int SOCK_CLOEXEC() {
        return (int)524288L;
    }
    public static int SOCK_NONBLOCK() {
        return (int)2048L;
    }
    public static int MSG_OOB() {
        return (int)1L;
    }
    public static int MSG_PEEK() {
        return (int)2L;
    }
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int MSG_CTRUNC() {
        return (int)8L;
    }
    public static int MSG_PROXY() {
        return (int)16L;
    }
    public static int MSG_TRUNC() {
        return (int)32L;
    }
    public static int MSG_DONTWAIT() {
        return (int)64L;
    }
    public static int MSG_EOR() {
        return (int)128L;
    }
    public static int MSG_WAITALL() {
        return (int)256L;
    }
    public static int MSG_FIN() {
        return (int)512L;
    }
    public static int MSG_SYN() {
        return (int)1024L;
    }
    public static int MSG_CONFIRM() {
        return (int)2048L;
    }
    public static int MSG_RST() {
        return (int)4096L;
    }
    public static int MSG_ERRQUEUE() {
        return (int)8192L;
    }
    public static int MSG_NOSIGNAL() {
        return (int)16384L;
    }
    public static int MSG_MORE() {
        return (int)32768L;
    }
    public static int MSG_WAITFORONE() {
        return (int)65536L;
    }
    public static int MSG_BATCH() {
        return (int)262144L;
    }
    public static int MSG_ZEROCOPY() {
        return (int)67108864L;
    }
    public static int MSG_FASTOPEN() {
        return (int)536870912L;
    }
    public static int MSG_CMSG_CLOEXEC() {
        return (int)1073741824L;
    }

    public static MethodHandle __cmsg_nxthdr$MH() {
        return RuntimeHelper.requireNonNull(constants$1.__cmsg_nxthdr$MH, "__cmsg_nxthdr");
    }

    public static MemorySegment __cmsg_nxthdr(MemorySegment __mhdr, MemorySegment __cmsg) {
        var mh$ = __cmsg_nxthdr$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static int SCM_RIGHTS() {
        return (int) 1L;
    }
    public static OfInt __kernel_key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_mqd_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_ipc_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_timer_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __kernel_caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static int SHUT_RD() {
        return (int)0L;
    }
    public static int SHUT_WR() {
        return (int)1L;
    }
    public static int SHUT_RDWR() {
        return (int)2L;
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1.socket$MH,"socket");
    }
    public static int socket ( int __domain,  int __type,  int __protocol) {
        var mh$ = socket$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle socketpair$MH() {
        return RuntimeHelper.requireNonNull(constants$2.socketpair$MH, "socketpair");
    }

    public static int socketpair(int __domain, int __type, int __protocol, MemorySegment __fds) {
        var mh$ = socketpair$MH();
        try {
            return (int) mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$2.bind$MH, "bind");
    }

    public static int bind(int __fd, MemorySegment __addr, int __len) {
        var mh$ = bind$MH();
        try {
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$2.getsockname$MH, "getsockname");
    }

    public static int getsockname(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getsockname$MH();
        try {
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$2.connect$MH, "connect");
    }

    public static int connect(int __fd, MemorySegment __addr, int __len) {
        var mh$ = connect$MH();
        try {
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$2.getpeername$MH, "getpeername");
    }

    public static int getpeername(int __fd, MemorySegment __addr, MemorySegment __len) {
        var mh$ = getpeername$MH();
        try {
            return (int) mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$2.send$MH, "send");
    }

    public static long send(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = send$MH();
        try {
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recv$MH, "recv");
    }

    public static long recv(int __fd, MemorySegment __buf, long __n, int __flags) {
        var mh$ = recv$MH();
        try {
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$3.sendto$MH, "sendto");
    }

    public static long sendto(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, int __addr_len) {
        var mh$ = sendto$MH();
        try {
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recvfrom$MH, "recvfrom");
    }

    public static long recvfrom(int __fd, MemorySegment __buf, long __n, int __flags, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = recvfrom$MH();
        try {
            return (long) mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$3.sendmsg$MH, "sendmsg");
    }

    public static long sendmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = sendmsg$MH();
        try {
            return (long) mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recvmsg$MH, "recvmsg");
    }

    public static long recvmsg(int __fd, MemorySegment __message, int __flags) {
        var mh$ = recvmsg$MH();
        try {
            return (long) mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$3.getsockopt$MH, "getsockopt");
    }

    public static int getsockopt(int __fd, int __level, int __optname, MemorySegment __optval, MemorySegment __optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int) mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setsockopt$MH, "setsockopt");
    }

    public static int setsockopt(int __fd, int __level, int __optname, MemorySegment __optval, int __optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int) mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$4.listen$MH, "listen");
    }
    public static int listen ( int __fd,  int __n) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$4.accept$MH, "accept");
    }

    public static int accept(int __fd, MemorySegment __addr, MemorySegment __addr_len) {
        var mh$ = accept$MH();
        try {
            return (int) mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$4.shutdown$MH, "shutdown");
    }
    public static int shutdown ( int __fd,  int __how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sockatmark$MH() {
        return RuntimeHelper.requireNonNull(constants$4.sockatmark$MH,"sockatmark");
    }
    public static int sockatmark ( int __fd) {
        var mh$ = sockatmark$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isfdtype$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isfdtype$MH,"isfdtype");
    }
    public static int isfdtype ( int __fd,  int __fdtype) {
        var mh$ = isfdtype$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$5.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int PF_UNIX() {
        return (int)1L;
    }
    public static int PF_FILE() {
        return (int)1L;
    }
    public static int PF_ROUTE() {
        return (int)16L;
    }
    public static int AF_UNSPEC() {
        return (int)0L;
    }
    public static int AF_LOCAL() {
        return (int)1L;
    }
    public static int AF_UNIX() {
        return (int)1L;
    }
    public static int AF_FILE() {
        return (int)1L;
    }
    public static int AF_INET() {
        return (int)2L;
    }
    public static int AF_AX25() {
        return (int)3L;
    }
    public static int AF_IPX() {
        return (int)4L;
    }
    public static int AF_APPLETALK() {
        return (int)5L;
    }
    public static int AF_NETROM() {
        return (int)6L;
    }
    public static int AF_BRIDGE() {
        return (int)7L;
    }
    public static int AF_ATMPVC() {
        return (int)8L;
    }
    public static int AF_X25() {
        return (int)9L;
    }
    public static int AF_INET6() {
        return (int)10L;
    }
    public static int AF_ROSE() {
        return (int)11L;
    }
    public static int AF_DECnet() {
        return (int)12L;
    }
    public static int AF_NETBEUI() {
        return (int)13L;
    }
    public static int AF_SECURITY() {
        return (int)14L;
    }
    public static int AF_KEY() {
        return (int)15L;
    }
    public static int AF_NETLINK() {
        return (int)16L;
    }
    public static int AF_ROUTE() {
        return (int)16L;
    }
    public static int AF_PACKET() {
        return (int)17L;
    }
    public static int AF_ASH() {
        return (int)18L;
    }
    public static int AF_ECONET() {
        return (int)19L;
    }
    public static int AF_ATMSVC() {
        return (int)20L;
    }
    public static int AF_RDS() {
        return (int)21L;
    }
    public static int AF_SNA() {
        return (int)22L;
    }
    public static int AF_IRDA() {
        return (int)23L;
    }
    public static int AF_PPPOX() {
        return (int)24L;
    }
    public static int AF_WANPIPE() {
        return (int)25L;
    }
    public static int AF_LLC() {
        return (int)26L;
    }
    public static int AF_IB() {
        return (int)27L;
    }
    public static int AF_MPLS() {
        return (int)28L;
    }
    public static int AF_CAN() {
        return (int)29L;
    }
    public static int AF_TIPC() {
        return (int)30L;
    }
    public static int AF_BLUETOOTH() {
        return (int)31L;
    }
    public static int AF_IUCV() {
        return (int)32L;
    }
    public static int AF_RXRPC() {
        return (int)33L;
    }
    public static int AF_ISDN() {
        return (int)34L;
    }
    public static int AF_PHONET() {
        return (int)35L;
    }
    public static int AF_IEEE802154() {
        return (int)36L;
    }
    public static int AF_CAIF() {
        return (int)37L;
    }
    public static int AF_ALG() {
        return (int)38L;
    }
    public static int AF_NFC() {
        return (int)39L;
    }
    public static int AF_VSOCK() {
        return (int)40L;
    }
    public static int AF_KCM() {
        return (int)41L;
    }
    public static int AF_QIPCRTR() {
        return (int)42L;
    }
    public static int AF_SMC() {
        return (int)43L;
    }
    public static int AF_XDP() {
        return (int)44L;
    }
    public static int AF_MAX() {
        return (int)45L;
    }
    public static long __SOCKADDR_COMMON_SIZE() {
        return 2L;
    }
    public static long _SS_PADSIZE() {
        return 118L;
    }
    public static int SO_GET_FILTER() {
        return (int)26L;
    }
    public static int SCM_WIFI_STATUS() {
        return (int)41L;
    }
    public static int SO_DETACH_BPF() {
        return (int)27L;
    }
    public static int SCM_TXTIME() {
        return (int)61L;
    }
    public static int SO_TIMESTAMP() {
        return (int)29L;
    }
    public static int SO_TIMESTAMPNS() {
        return (int)35L;
    }
    public static int SO_TIMESTAMPING() {
        return (int)37L;
    }
    public static int SO_RCVTIMEO() {
        return (int)20L;
    }
    public static int SO_SNDTIMEO() {
        return (int)21L;
    }
    public static int SCM_TIMESTAMP() {
        return (int)29L;
    }
    public static int SCM_TIMESTAMPNS() {
        return (int)35L;
    }
    public static int SCM_TIMESTAMPING() {
        return (int)37L;
    }
}


