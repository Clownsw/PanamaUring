// Generated by jextract

package top.dreamlike.nativeLib.epoll;

import top.dreamlike.helper.RuntimeHelper;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
public class epoll_h  {

    /* package-private */ epoll_h() {}

    public static int EPOLL_CTL_ADD() {
        return (int)1L;
    }
    public static int EPOLL_CTL_DEL() {
        return (int)2L;
    }
    public static int EPOLL_CTL_MOD() {
        return (int)3L;
    }

    public static int EPOLL_CLOEXEC() {
        return (int)524288L;
    }
    public static int EPOLLIN() {
        return (int)1L;
    }
    public static int EPOLLPRI() {
        return (int)2L;
    }
    public static int EPOLLOUT() {
        return (int)4L;
    }
    public static int EPOLLRDNORM() {
        return (int)64L;
    }
    public static int EPOLLRDBAND() {
        return (int)128L;
    }
    public static int EPOLLWRNORM() {
        return (int)256L;
    }
    public static int EPOLLWRBAND() {
        return (int)512L;
    }
    public static int EPOLLMSG() {
        return (int)1024L;
    }
    public static int EPOLLERR() {
        return (int)8L;
    }
    public static int EPOLLHUP() {
        return (int)16L;
    }
    public static int EPOLLRDHUP() {
        return (int)8192L;
    }
    public static int EPOLLEXCLUSIVE() {
        return (int)268435456L;
    }
    public static int EPOLLWAKEUP() {
        return (int)536870912L;
    }
    public static int EPOLLONESHOT() {
        return (int)1073741824L;
    }
    public static int EPOLLET() {
        return (int)-2147483648L;
    }
    private static MethodHandle epoll_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1.epoll_create$MH,"epoll_create");
    }
    public static int epoll_create ( int __size) {
        var mh$ = epoll_create$MH();
        try {
            return (int)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    private static MethodHandle epoll_create1$MH() {
        return RuntimeHelper.requireNonNull(constants$1.epoll_create1$MH,"epoll_create1");
    }
    public static int epoll_create1 ( int __flags) {
        var mh$ = epoll_create1$MH();
        try {
            return (int)mh$.invokeExact(__flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static MethodHandle epoll_ctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1.epoll_ctl$MH, "epoll_ctl");
    }

    public static int epoll_ctl(int __epfd, int __op, int __fd, MemorySegment __event) {
        var mh$ = epoll_ctl$MH();
        try {
            return (int) mh$.invokeExact(__epfd, __op, __fd, __event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    private static MethodHandle epoll_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$1.epoll_wait$MH, "epoll_wait");
    }

    public static int epoll_wait(int __epfd, MemorySegment __events, int __maxevents, int __timeout) {
        var mh$ = epoll_wait$MH();
        try {
            return (int) mh$.invokeExact(__epfd, __events, __maxevents, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle epoll_pwait$MH() {
        return RuntimeHelper.requireNonNull(constants$2.epoll_pwait$MH, "epoll_pwait");
    }

    public static int epoll_pwait(int __epfd, MemorySegment __events, int __maxevents, int __timeout, MemorySegment __ss) {
        var mh$ = epoll_pwait$MH();
        try {
            return (int) mh$.invokeExact(__epfd, __events, __maxevents, __timeout, __ss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

}


