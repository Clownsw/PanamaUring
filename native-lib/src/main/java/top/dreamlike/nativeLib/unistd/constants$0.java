// Generated by jextract

package top.dreamlike.nativeLib.unistd;

import top.dreamlike.common.CType;
import top.dreamlike.helper.RuntimeHelper;

import java.lang.foreign.FunctionDescriptor;
import java.lang.invoke.MethodHandle;
class constants$0 {

    static final FunctionDescriptor access$FUNC = FunctionDescriptor.of(CType.C_INT$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle access$MH = RuntimeHelper.downcallHandle(
        "access",
        constants$0.access$FUNC
    );
    static final FunctionDescriptor faccessat$FUNC = FunctionDescriptor.of(CType.C_INT$LAYOUT,
        CType.C_INT$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_INT$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle faccessat$MH = RuntimeHelper.downcallHandle(
        "faccessat",
        constants$0.faccessat$FUNC
    );
    static final FunctionDescriptor lseek$FUNC = FunctionDescriptor.of(CType.C_LONG_LONG$LAYOUT,
        CType.C_INT$LAYOUT,
        CType.C_LONG_LONG$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle lseek$MH = RuntimeHelper.downcallHandle(
        "lseek",
        constants$0.lseek$FUNC
    );
    static final FunctionDescriptor close$FUNC = FunctionDescriptor.of(CType.C_INT$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle close$MH = RuntimeHelper.downcallHandle(
        "close",
        constants$0.close$FUNC
    );
    static final FunctionDescriptor read$FUNC = FunctionDescriptor.of(CType.C_LONG_LONG$LAYOUT,
        CType.C_INT$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle read$MH = RuntimeHelper.downcallHandle(
        "read",
        constants$0.read$FUNC
    );
    static final FunctionDescriptor write$FUNC = FunctionDescriptor.of(CType.C_LONG_LONG$LAYOUT,
        CType.C_INT$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle write$MH = RuntimeHelper.downcallHandle(
        "write",
        constants$0.write$FUNC
    );
}


