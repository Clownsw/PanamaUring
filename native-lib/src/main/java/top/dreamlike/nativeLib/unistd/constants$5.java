// Generated by jextract

package top.dreamlike.nativeLib.unistd;

import top.dreamlike.common.CType;

import java.lang.foreign.FunctionDescriptor;
import java.lang.invoke.MethodHandle;

class constants$5 {

    static final FunctionDescriptor execvp$FUNC = FunctionDescriptor.of(CType.C_INT$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_POINTER$LAYOUT
    );
    static final MethodHandle execvp$MH = RuntimeHelper.downcallHandle(
        "execvp",
        constants$5.execvp$FUNC
    );
    static final FunctionDescriptor execlp$FUNC = FunctionDescriptor.of(CType.C_INT$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_POINTER$LAYOUT
    );
    static final MethodHandle execlp$MH = RuntimeHelper.downcallHandleVariadic(
        "execlp",
        constants$5.execlp$FUNC
    );
    static final FunctionDescriptor nice$FUNC = FunctionDescriptor.of(CType.C_INT$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle nice$MH = RuntimeHelper.downcallHandle(
        "nice",
        constants$5.nice$FUNC
    );
    static final FunctionDescriptor _exit$FUNC = FunctionDescriptor.ofVoid(
        CType.C_INT$LAYOUT
    );
    static final MethodHandle _exit$MH = RuntimeHelper.downcallHandle(
        "_exit",
        constants$5._exit$FUNC
    );
    static final FunctionDescriptor pathconf$FUNC = FunctionDescriptor.of(CType.C_LONG_LONG$LAYOUT,
        CType.C_POINTER$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle pathconf$MH = RuntimeHelper.downcallHandle(
        "pathconf",
        constants$5.pathconf$FUNC
    );
    static final FunctionDescriptor fpathconf$FUNC = FunctionDescriptor.of(CType.C_LONG_LONG$LAYOUT,
        CType.C_INT$LAYOUT,
        CType.C_INT$LAYOUT
    );
    static final MethodHandle fpathconf$MH = RuntimeHelper.downcallHandle(
        "fpathconf",
        constants$5.fpathconf$FUNC
    );
}


