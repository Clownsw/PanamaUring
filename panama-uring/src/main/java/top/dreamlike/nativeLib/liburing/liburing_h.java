// Generated by jextract

package top.dreamlike.nativeLib.liburing;

import top.dreamlike.helper.NativeHelper;
import top.dreamlike.helper.RuntimeHelper;

import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
public class liburing_h extends liburing_h_1 {

    /* package-private */ liburing_h() {}


    public static int FSCONFIG_SET_FLAG() {
        return (int) 0L;
    }
    public static int FSCONFIG_SET_STRING() {
        return (int)1L;
    }
    public static int FSCONFIG_SET_BINARY() {
        return (int)2L;
    }
    public static int FSCONFIG_SET_PATH() {
        return (int)3L;
    }
    public static int FSCONFIG_SET_PATH_EMPTY() {
        return (int)4L;
    }
    public static int FSCONFIG_SET_FD() {
        return (int)5L;
    }
    public static int FSCONFIG_CMD_CREATE() {
        return (int)6L;
    }
    public static int FSCONFIG_CMD_RECONFIGURE() {
        return (int)7L;
    }

    public static int IOSQE_FIXED_FILE_BIT() {
        return (int)0L;
    }
    public static int IOSQE_IO_DRAIN_BIT() {
        return (int)1L;
    }
    public static int IOSQE_IO_LINK_BIT() {
        return (int)2L;
    }
    public static int IOSQE_IO_HARDLINK_BIT() {
        return (int)3L;
    }
    public static int IOSQE_ASYNC_BIT() {
        return (int)4L;
    }
    public static int IOSQE_BUFFER_SELECT_BIT() {
        return (int)5L;
    }
    public static int IORING_OP_NOP() {
        return (int)0L;
    }
    public static int IORING_OP_READV() {
        return (int)1L;
    }
    public static int IORING_OP_WRITEV() {
        return (int)2L;
    }
    public static int IORING_OP_FSYNC() {
        return (int)3L;
    }
    public static int IORING_OP_READ_FIXED() {
        return (int)4L;
    }
    public static int IORING_OP_WRITE_FIXED() {
        return (int)5L;
    }
    public static int IORING_OP_POLL_ADD() {
        return (int)6L;
    }
    public static int IORING_OP_POLL_REMOVE() {
        return (int)7L;
    }
    public static int IORING_OP_SYNC_FILE_RANGE() {
        return (int)8L;
    }
    public static int IORING_OP_SENDMSG() {
        return (int)9L;
    }
    public static int IORING_OP_RECVMSG() {
        return (int)10L;
    }
    public static int IORING_OP_TIMEOUT() {
        return (int)11L;
    }
    public static int IORING_OP_TIMEOUT_REMOVE() {
        return (int)12L;
    }
    public static int IORING_OP_ACCEPT() {
        return (int)13L;
    }
    public static int IORING_OP_ASYNC_CANCEL() {
        return (int)14L;
    }
    public static int IORING_OP_LINK_TIMEOUT() {
        return (int)15L;
    }
    public static int IORING_OP_CONNECT() {
        return (int)16L;
    }
    public static int IORING_OP_FALLOCATE() {
        return (int)17L;
    }
    public static int IORING_OP_OPENAT() {
        return (int)18L;
    }
    public static int IORING_OP_CLOSE() {
        return (int)19L;
    }
    public static int IORING_OP_FILES_UPDATE() {
        return (int)20L;
    }
    public static int IORING_OP_STATX() {
        return (int)21L;
    }
    public static int IORING_OP_READ() {
        return (int)22L;
    }
    public static int IORING_OP_WRITE() {
        return (int)23L;
    }
    public static int IORING_OP_FADVISE() {
        return (int)24L;
    }
    public static int IORING_OP_MADVISE() {
        return (int)25L;
    }
    public static int IORING_OP_SEND() {
        return (int)26L;
    }
    public static int IORING_OP_RECV() {
        return (int)27L;
    }
    public static int IORING_OP_OPENAT2() {
        return (int)28L;
    }
    public static int IORING_OP_EPOLL_CTL() {
        return (int)29L;
    }
    public static int IORING_OP_SPLICE() {
        return (int)30L;
    }
    public static int IORING_OP_PROVIDE_BUFFERS() {
        return (int)31L;
    }
    public static int IORING_OP_REMOVE_BUFFERS() {
        return (int)32L;
    }
    public static int IORING_OP_TEE() {
        return (int)33L;
    }
    public static int IORING_OP_SHUTDOWN() {
        return (int)34L;
    }
    public static int IORING_OP_RENAMEAT() {
        return (int)35L;
    }
    public static int IORING_OP_UNLINKAT() {
        return (int)36L;
    }
    public static int IORING_OP_MKDIRAT() {
        return (int)37L;
    }
    public static int IORING_OP_LAST() {
        return (int)38L;
    }
    public static int IORING_CQE_BUFFER_SHIFT() {
        return (int)16L;
    }
    public static int IORING_REGISTER_BUFFERS() {
        return (int)0L;
    }
    public static int IORING_UNREGISTER_BUFFERS() {
        return (int)1L;
    }
    public static int IORING_REGISTER_FILES() {
        return (int)2L;
    }
    public static int IORING_UNREGISTER_FILES() {
        return (int)3L;
    }
    public static int IORING_REGISTER_EVENTFD() {
        return (int)4L;
    }
    public static int IORING_UNREGISTER_EVENTFD() {
        return (int)5L;
    }
    public static int IORING_REGISTER_FILES_UPDATE() {
        return (int)6L;
    }
    public static int IORING_REGISTER_EVENTFD_ASYNC() {
        return (int)7L;
    }
    public static int IORING_REGISTER_PROBE() {
        return (int)8L;
    }
    public static int IORING_REGISTER_PERSONALITY() {
        return (int)9L;
    }
    public static int IORING_UNREGISTER_PERSONALITY() {
        return (int)10L;
    }
    public static int IORING_REGISTER_RESTRICTIONS() {
        return (int)11L;
    }
    public static int IORING_REGISTER_ENABLE_RINGS() {
        return (int)12L;
    }
    public static int IORING_REGISTER_LAST() {
        return (int)13L;
    }
    public static int IORING_RESTRICTION_REGISTER_OP() {
        return (int)0L;
    }
    public static int IORING_RESTRICTION_SQE_OP() {
        return (int)1L;
    }

    public static int IORING_RESTRICTION_SQE_FLAGS_ALLOWED() {
        return (int) 2L;
    }

    public static int IORING_RESTRICTION_SQE_FLAGS_REQUIRED() {
        return (int) 3L;
    }

    public static int IORING_RESTRICTION_LAST() {
        return (int) 4L;
    }

    public static int IORING_ACCEPT_MULTISHOT() {
        return 1;
    }

    public static int IORING_RECV_MULTISHOT() {
        return 1 << 1;
    }


    public static MethodHandle io_uring_get_probe_ring$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_get_probe_ring$MH, "io_uring_get_probe_ring");
    }

    public static MemorySegment io_uring_get_probe_ring(MemorySegment ring) {
        var mh$ = io_uring_get_probe_ring$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_get_probe$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_get_probe$MH, "io_uring_get_probe");
    }

    public static MemorySegment io_uring_get_probe() {
        var mh$ = io_uring_get_probe$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_free_probe$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_free_probe$MH, "io_uring_free_probe");
    }

    public static void io_uring_free_probe(MemorySegment probe) {
        var mh$ = io_uring_free_probe$MH();
        try {
            mh$.invokeExact(probe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_opcode_supported_ring$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_opcode_supported_ring$MH, "io_uring_opcode_supported_ring");
    }

    public static int io_uring_opcode_supported_ring(MemorySegment ring, int op) {
        var mh$ = io_uring_opcode_supported_ring$MH();
        try {
            return (int) mh$.invokeExact(ring, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_opcode_supported$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_opcode_supported$MH, "io_uring_opcode_supported");
    }

    public static int io_uring_opcode_supported(MemorySegment p, int op) {
        var mh$ = io_uring_opcode_supported$MH();
        try {
            return (int) mh$.invokeExact(p, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_queue_init_params$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_queue_init_params$MH, "io_uring_queue_init_params");
    }

    public static int io_uring_queue_init_params(int entries, MemorySegment ring, MemorySegment p) {
        var mh$ = io_uring_queue_init_params$MH();
        try {
            return (int) mh$.invokeExact(entries, ring, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_queue_init$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_queue_init$MH, "io_uring_queue_init");
    }

    public static int io_uring_queue_init(int entries, MemorySegment ring, int flags) {
        var mh$ = io_uring_queue_init$MH();
        try {
            return (int) mh$.invokeExact(entries, ring, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_queue_mmap$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_queue_mmap$MH, "io_uring_queue_mmap");
    }

    public static int io_uring_queue_mmap(int fd, MemorySegment p, MemorySegment ring) {
        var mh$ = io_uring_queue_mmap$MH();
        try {
            return (int) mh$.invokeExact(fd, p, ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_ring_dontfork$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_ring_dontfork$MH, "io_uring_ring_dontfork");
    }

    public static int io_uring_ring_dontfork(MemorySegment ring) {
        var mh$ = io_uring_ring_dontfork$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_queue_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_queue_exit$MH, "io_uring_queue_exit");
    }

    public static void io_uring_queue_exit(MemorySegment ring) {
        var mh$ = io_uring_queue_exit$MH();
        try {
            mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_peek_batch_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_peek_batch_cqe$MH, "io_uring_peek_batch_cqe");
    }

    public static int io_uring_peek_batch_cqe(MemorySegment ring, MemorySegment cqes, int count) {
        var mh$ = io_uring_peek_batch_cqe$MH();
        try {
            return (int) mh$.invokeExact(ring, cqes, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_wait_cqes$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_wait_cqes$MH, "io_uring_wait_cqes");
    }

    public static int io_uring_wait_cqes(MemorySegment ring, MemorySegment cqe_ptr, int wait_nr, MemorySegment ts, MemorySegment sigmask) {
        var mh$ = io_uring_wait_cqes$MH();
        try {
            return (int) mh$.invokeExact(ring, cqe_ptr, wait_nr, ts, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_wait_cqe_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_wait_cqe_timeout$MH, "io_uring_wait_cqe_timeout");
    }

    public static int io_uring_wait_cqe_timeout(MemorySegment ring, MemorySegment cqe_ptr, MemorySegment ts) {
        var mh$ = io_uring_wait_cqe_timeout$MH();
        try {
            return (int) mh$.invokeExact(ring, cqe_ptr, ts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_submit$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_submit$MH, "io_uring_submit");
    }

    public static int io_uring_submit(MemorySegment ring) {
        var mh$ = io_uring_submit$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_submit_and_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_submit_and_wait$MH, "io_uring_submit_and_wait");
    }

    public static int io_uring_submit_and_wait(MemorySegment ring, int wait_nr) {
        var mh$ = io_uring_submit_and_wait$MH();
        try {
            return (int) mh$.invokeExact(ring, wait_nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_get_sqe$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_get_sqe$MH, "io_uring_get_sqe");
    }

    public static MemorySegment io_uring_get_sqe(MemorySegment ring) {
        var mh$ = io_uring_get_sqe$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_register_buffers$MH, "io_uring_register_buffers");
    }

    public static int io_uring_register_buffers(MemorySegment ring, MemorySegment iovecs, int nr_iovecs) {
        var mh$ = io_uring_register_buffers$MH();
        try {
            return (int) mh$.invokeExact(ring, iovecs, nr_iovecs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_unregister_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_unregister_buffers$MH, "io_uring_unregister_buffers");
    }

    public static int io_uring_unregister_buffers(MemorySegment ring) {
        var mh$ = io_uring_unregister_buffers$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_files$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_register_files$MH, "io_uring_register_files");
    }

    public static int io_uring_register_files(MemorySegment ring, MemorySegment files, int nr_files) {
        var mh$ = io_uring_register_files$MH();
        try {
            return (int) mh$.invokeExact(ring, files, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_unregister_files$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_unregister_files$MH, "io_uring_unregister_files");
    }

    public static int io_uring_unregister_files(MemorySegment ring) {
        var mh$ = io_uring_unregister_files$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_files_update$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_register_files_update$MH, "io_uring_register_files_update");
    }

    public static int io_uring_register_files_update(MemorySegment ring, int off, MemorySegment files, int nr_files) {
        var mh$ = io_uring_register_files_update$MH();
        try {
            return (int) mh$.invokeExact(ring, off, files, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_eventfd$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_register_eventfd$MH, "io_uring_register_eventfd");
    }

    public static int io_uring_register_eventfd(MemorySegment ring, int fd) {
        var mh$ = io_uring_register_eventfd$MH();
        try {
            return (int) mh$.invokeExact(ring, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_eventfd_async$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_register_eventfd_async$MH, "io_uring_register_eventfd_async");
    }

    public static int io_uring_register_eventfd_async(MemorySegment ring, int fd) {
        var mh$ = io_uring_register_eventfd_async$MH();
        try {
            return (int) mh$.invokeExact(ring, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_unregister_eventfd$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_unregister_eventfd$MH, "io_uring_unregister_eventfd");
    }

    public static int io_uring_unregister_eventfd(MemorySegment ring) {
        var mh$ = io_uring_unregister_eventfd$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_probe$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_register_probe$MH, "io_uring_register_probe");
    }

    public static int io_uring_register_probe(MemorySegment ring, MemorySegment p, int nr) {
        var mh$ = io_uring_register_probe$MH();
        try {
            return (int) mh$.invokeExact(ring, p, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_personality$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_register_personality$MH, "io_uring_register_personality");
    }

    public static int io_uring_register_personality(MemorySegment ring) {
        var mh$ = io_uring_register_personality$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_unregister_personality$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_unregister_personality$MH, "io_uring_unregister_personality");
    }

    public static int io_uring_unregister_personality(MemorySegment ring, int id) {
        var mh$ = io_uring_unregister_personality$MH();
        try {
            return (int) mh$.invokeExact(ring, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_register_restrictions$MH() {
        return RuntimeHelper.requireNonNull(constants$27.io_uring_register_restrictions$MH, "io_uring_register_restrictions");
    }

    public static int io_uring_register_restrictions(MemorySegment ring, MemorySegment res, int nr_res) {
        var mh$ = io_uring_register_restrictions$MH();
        try {
            return (int) mh$.invokeExact(ring, res, nr_res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_enable_rings$MH() {
        return RuntimeHelper.requireNonNull(constants$27.io_uring_enable_rings$MH, "io_uring_enable_rings");
    }

    public static int io_uring_enable_rings(MemorySegment ring) {
        var mh$ = io_uring_enable_rings$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __io_uring_sqring_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$27.__io_uring_sqring_wait$MH, "__io_uring_sqring_wait");
    }

    public static int __io_uring_sqring_wait(MemorySegment ring) {
        var mh$ = __io_uring_sqring_wait$MH();
        try {
            return (int) mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __io_uring_get_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$27.__io_uring_get_cqe$MH, "__io_uring_get_cqe");
    }

    public static int __io_uring_get_cqe(MemorySegment ring, MemorySegment cqe_ptr, int submit, int wait_nr, MemorySegment sigmask) {
        var mh$ = __io_uring_get_cqe$MH();
        try {
            return (int) mh$.invokeExact(ring, cqe_ptr, submit, wait_nr, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_cq_advance$MH() {
        return RuntimeHelper.requireNonNull(constants$27.io_uring_cq_advance$MH, "io_uring_cq_advance");
    }

    public static void io_uring_cq_advance(MemorySegment ring, int nr) {
        var mh$ = io_uring_cq_advance$MH();
        try {
            mh$.invokeExact(ring, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_cqe_seen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.io_uring_cqe_seen$MH, "io_uring_cqe_seen");
    }

    public static void io_uring_cqe_seen(MemorySegment ring, MemorySegment cqe) {
        var mh$ = io_uring_cqe_seen$MH();
        try {
            mh$.invokeExact(ring, cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_sqe_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$28.io_uring_sqe_set_data$MH, "io_uring_sqe_set_data");
    }

    public static void io_uring_sqe_set_data(MemorySegment sqe, MemorySegment data) {
        var mh$ = io_uring_sqe_set_data$MH();
        try {
            mh$.invokeExact(sqe, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_cqe_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$28.io_uring_cqe_get_data$MH, "io_uring_cqe_get_data");
    }

    public static MemorySegment io_uring_cqe_get_data(MemorySegment cqe) {
        var mh$ = io_uring_cqe_get_data$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact(cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_sqe_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$28.io_uring_sqe_set_flags$MH, "io_uring_sqe_set_flags");
    }

    public static void io_uring_sqe_set_flags(MemorySegment sqe, int flags) {
        var mh$ = io_uring_sqe_set_flags$MH();
        try {
            mh$.invokeExact(sqe, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_rw$MH() {
        return RuntimeHelper.requireNonNull(constants$28.io_uring_prep_rw$MH, "io_uring_prep_rw");
    }

    public static void io_uring_prep_rw(int op, MemorySegment sqe, int fd, MemorySegment addr, int len, long offset) {
        MemorySegment sqeSegment = NativeHelper.unsafePointConvertor(sqe);
        io_uring_sqe.opcode$set(sqeSegment, (byte) op);
        //暂时不填充 防止覆盖用户的操作
//        io_uring_sqe.flags$get(sqeSegment,0);
        io_uring_sqe.ioprio$set(sqeSegment, (short) 0);
        io_uring_sqe.fd$set(sqeSegment, fd);
        io_uring_sqe.off$set(sqeSegment, offset);
        io_uring_sqe.addr$set(sqeSegment, addr.address());
        io_uring_sqe.len$set(sqeSegment, len);
        //暂时不填充 防止覆盖用户的操作
//        io_uring_sqe.rw_flags$set(sqeSegment, 0);
//        io_uring_sqe.user_data$set(sqeSegment, 0);
        io_uring_sqe.__pad2$slice(sqeSegment).fill((byte) 0);
    }

    public static MethodHandle io_uring_prep_splice$MH() {
        return RuntimeHelper.requireNonNull(constants$28.io_uring_prep_splice$MH, "io_uring_prep_splice");
    }

    public static void io_uring_prep_splice(MemorySegment sqe, int fd_in, long off_in, int fd_out, long off_out, int nbytes, int splice_flags) {
        var mh$ = io_uring_prep_splice$MH();
        try {
            mh$.invokeExact(sqe, fd_in, off_in, fd_out, off_out, nbytes, splice_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_tee$MH() {
        return RuntimeHelper.requireNonNull(constants$28.io_uring_prep_tee$MH, "io_uring_prep_tee");
    }

    public static void io_uring_prep_tee(MemorySegment sqe, int fd_in, int fd_out, int nbytes, int splice_flags) {
        var mh$ = io_uring_prep_tee$MH();
        try {
            mh$.invokeExact(sqe, fd_in, fd_out, nbytes, splice_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_readv$MH() {
        return RuntimeHelper.requireNonNull(constants$29.io_uring_prep_readv$MH, "io_uring_prep_readv");
    }

    public static void io_uring_prep_readv(MemorySegment sqe, int fd, MemorySegment iovecs, int nr_vecs, long offset) {
        io_uring_prep_rw(IORING_OP_READV(), sqe, fd, iovecs, nr_vecs, offset);
    }

    public static MethodHandle io_uring_prep_read_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$29.io_uring_prep_read_fixed$MH, "io_uring_prep_read_fixed");
    }

    public static void io_uring_prep_read_fixed(MemorySegment sqe, int fd, MemorySegment buf, int nbytes, long offset, int buf_index) {
        var mh$ = io_uring_prep_read_fixed$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset, buf_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_writev$MH() {
        return RuntimeHelper.requireNonNull(constants$29.io_uring_prep_writev$MH, "io_uring_prep_writev");
    }

    public static void io_uring_prep_writev(MemorySegment sqe, int fd, MemorySegment iovecs, int nr_vecs, long offset) {
        io_uring_prep_rw(IORING_OP_WRITEV(), sqe, fd, iovecs, nr_vecs, offset);
    }

    public static MethodHandle io_uring_prep_write_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$29.io_uring_prep_write_fixed$MH, "io_uring_prep_write_fixed");
    }

    public static void io_uring_prep_write_fixed(MemorySegment sqe, int fd, MemorySegment buf, int nbytes, long offset, int buf_index) {
        var mh$ = io_uring_prep_write_fixed$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset, buf_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$29.io_uring_prep_recvmsg$MH, "io_uring_prep_recvmsg");
    }

    public static void io_uring_prep_recvmsg(MemorySegment sqe, int fd, MemorySegment msg, int flags) {
        var mh$ = io_uring_prep_recvmsg$MH();
        try {
            mh$.invokeExact(sqe, fd, msg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$29.io_uring_prep_sendmsg$MH, "io_uring_prep_sendmsg");
    }

    public static void io_uring_prep_sendmsg(MemorySegment sqe, int fd, MemorySegment msg, int flags) {
        var mh$ = io_uring_prep_sendmsg$MH();
        try {
            mh$.invokeExact(sqe, fd, msg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_poll_add$MH() {
        return RuntimeHelper.requireNonNull(constants$30.io_uring_prep_poll_add$MH, "io_uring_prep_poll_add");
    }

    public static void io_uring_prep_poll_add(MemorySegment sqe, int fd, int poll_mask) {
        var mh$ = io_uring_prep_poll_add$MH();
        try {
            mh$.invokeExact(sqe, fd, poll_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_poll_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$30.io_uring_prep_poll_remove$MH, "io_uring_prep_poll_remove");
    }

    public static void io_uring_prep_poll_remove(MemorySegment sqe, MemorySegment user_data) {
        var mh$ = io_uring_prep_poll_remove$MH();
        try {
            mh$.invokeExact(sqe, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle io_uring_prep_fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$30.io_uring_prep_fsync$MH, "io_uring_prep_fsync");
    }

    public static void io_uring_prep_fsync(MemorySegment sqe, int fd, int fsync_flags) {
//        io_uring_prep_rw(IORING_OP_FSYNC, sqe, res, NULL, 0, 0);
//	sqe->fsync_flags = fsync_flags;
        io_uring_prep_rw(IORING_OP_FSYNC(), sqe, fd, MemorySegment.NULL, 0, 0);
        MemorySegment sqeSegment = sqe.reinterpret(io_uring.sizeof());
        io_uring_sqe.fsync_flags$set(sqeSegment, fsync_flags);
    }

    public static MethodHandle io_uring_prep_nop$MH() {
        return RuntimeHelper.requireNonNull(constants$30.io_uring_prep_nop$MH, "io_uring_prep_nop");
    }

    public static void io_uring_prep_nop(MemorySegment sqe) {
        io_uring_prep_rw(IORING_OP_NOP(), sqe, -1, MemorySegment.NULL, 0, 0);
    }
}


