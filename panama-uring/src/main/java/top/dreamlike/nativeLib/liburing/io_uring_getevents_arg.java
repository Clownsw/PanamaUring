// Generated by jextract

package top.dreamlike.nativeLib.liburing;

import top.dreamlike.common.CType;

import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

public class io_uring_getevents_arg {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        CType.C_LONG_LONG$LAYOUT.withName("sigmask"),
        CType.C_INT$LAYOUT.withName("sigmask_sz"),
        CType.C_INT$LAYOUT.withName("pad"),
        CType.C_LONG_LONG$LAYOUT.withName("ts")
    ).withName("io_uring_getevents_arg");
    public static MemoryLayout $LAYOUT() {
        return io_uring_getevents_arg.$struct$LAYOUT;
    }
    static final VarHandle sigmask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sigmask"));
    public static VarHandle sigmask$VH() {
        return io_uring_getevents_arg.sigmask$VH;
    }
    public static long sigmask$get(MemorySegment seg) {
        return (long)io_uring_getevents_arg.sigmask$VH.get(seg);
    }
    public static void sigmask$set( MemorySegment seg, long x) {
        io_uring_getevents_arg.sigmask$VH.set(seg, x);
    }
    public static long sigmask$get(MemorySegment seg, long index) {
        return (long)io_uring_getevents_arg.sigmask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sigmask$set(MemorySegment seg, long index, long x) {
        io_uring_getevents_arg.sigmask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sigmask_sz$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sigmask_sz"));
    public static VarHandle sigmask_sz$VH() {
        return io_uring_getevents_arg.sigmask_sz$VH;
    }
    public static int sigmask_sz$get(MemorySegment seg) {
        return (int)io_uring_getevents_arg.sigmask_sz$VH.get(seg);
    }
    public static void sigmask_sz$set( MemorySegment seg, int x) {
        io_uring_getevents_arg.sigmask_sz$VH.set(seg, x);
    }
    public static int sigmask_sz$get(MemorySegment seg, long index) {
        return (int)io_uring_getevents_arg.sigmask_sz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sigmask_sz$set(MemorySegment seg, long index, int x) {
        io_uring_getevents_arg.sigmask_sz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pad$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pad"));
    public static VarHandle pad$VH() {
        return io_uring_getevents_arg.pad$VH;
    }
    public static int pad$get(MemorySegment seg) {
        return (int)io_uring_getevents_arg.pad$VH.get(seg);
    }
    public static void pad$set( MemorySegment seg, int x) {
        io_uring_getevents_arg.pad$VH.set(seg, x);
    }
    public static int pad$get(MemorySegment seg, long index) {
        return (int)io_uring_getevents_arg.pad$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pad$set(MemorySegment seg, long index, int x) {
        io_uring_getevents_arg.pad$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ts"));
    public static VarHandle ts$VH() {
        return io_uring_getevents_arg.ts$VH;
    }
    public static long ts$get(MemorySegment seg) {
        return (long)io_uring_getevents_arg.ts$VH.get(seg);
    }
    public static void ts$set( MemorySegment seg, long x) {
        io_uring_getevents_arg.ts$VH.set(seg, x);
    }
    public static long ts$get(MemorySegment seg, long index) {
        return (long)io_uring_getevents_arg.ts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ts$set(MemorySegment seg, long index, long x) {
        io_uring_getevents_arg.ts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }


}


