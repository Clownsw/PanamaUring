// Generated by jextract

package top.dreamlike.panama.generator.test.struct;

import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;

import static java.lang.foreign.ValueLayout.*;

public class epoll_data {

    static final GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
            ADDRESS.withByteAlignment(1).withName("ptr"),
            JAVA_INT.withByteAlignment(1).withName("fd"),
            JAVA_INT.withByteAlignment(1).withName("u32"),
            JAVA_LONG.withByteAlignment(1).withName("u64")
    ).withName("data");
    static final VarHandle ptr$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ptr"));
    static final VarHandle fd$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fd"));
    static final VarHandle u32$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("u32"));
    static final VarHandle u64$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("u64"));

    public static MemoryLayout $LAYOUT() {
        return epoll_data.$union$LAYOUT;
    }

    public static VarHandle ptr$VH() {
        return epoll_data.ptr$VH;
    }

    public static MemorySegment ptr$get(MemorySegment seg) {
        return (MemorySegment) epoll_data.ptr$VH.get(seg);
    }

    public static void ptr$set(MemorySegment seg, MemorySegment x) {
        epoll_data.ptr$VH.set(seg, x);
    }

    public static MemorySegment ptr$get(MemorySegment seg, long index) {
        return (MemorySegment) epoll_data.ptr$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void ptr$set(MemorySegment seg, long index, MemorySegment x) {
        epoll_data.ptr$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle fd$VH() {
        return epoll_data.fd$VH;
    }

    public static int fd$get(MemorySegment seg) {
        return (int) epoll_data.fd$VH.get(seg);
    }

    public static void fd$set(MemorySegment seg, int x) {
        epoll_data.fd$VH.set(seg, x);
    }

    public static int fd$get(MemorySegment seg, long index) {
        return (int) epoll_data.fd$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void fd$set(MemorySegment seg, long index, int x) {
        epoll_data.fd$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle u32$VH() {
        return epoll_data.u32$VH;
    }

    public static int u32$get(MemorySegment seg) {
        return (int) epoll_data.u32$VH.get(seg);
    }

    public static void u32$set(MemorySegment seg, int x) {
        epoll_data.u32$VH.set(seg, x);
    }

    public static int u32$get(MemorySegment seg, long index) {
        return (int) epoll_data.u32$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void u32$set(MemorySegment seg, long index, int x) {
        epoll_data.u32$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static VarHandle u64$VH() {
        return epoll_data.u64$VH;
    }

    public static long u64$get(MemorySegment seg) {
        return (long) epoll_data.u64$VH.get(seg);
    }

    public static void u64$set(MemorySegment seg, long x) {
        epoll_data.u64$VH.set(seg, x);
    }

    public static long u64$get(MemorySegment seg, long index) {
        return (long) epoll_data.u64$VH.get(seg.asSlice(index * sizeof()));
    }

    public static void u64$set(MemorySegment seg, long index, long x) {
        epoll_data.u64$VH.set(seg.asSlice(index * sizeof()), x);
    }

    public static long sizeof() {
        return $LAYOUT().byteSize();
    }

    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate($LAYOUT());
    }

    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }

}


