// Generated by jextract

package top.dreamlike.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _libc_fpstate {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("__cwd"),
        Constants$root.C_SHORT$LAYOUT.withName("__swd"),
        Constants$root.C_SHORT$LAYOUT.withName("__ftw"),
        Constants$root.C_SHORT$LAYOUT.withName("__fop"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__rip"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("__rdp"),
        Constants$root.C_INT$LAYOUT.withName("__mxcsr"),
        Constants$root.C_INT$LAYOUT.withName("__mxcr_mask"),
        MemoryLayout.sequenceLayout(8, MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("__significand"),
            Constants$root.C_SHORT$LAYOUT.withName("__exponent"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_SHORT$LAYOUT).withName("__glibc_reserved1")
        ).withName("_libc_fpxreg")).withName("_st"),
        MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName("__element")
        ).withName("_libc_xmmreg")).withName("_xmm"),
        MemoryLayout.sequenceLayout(24, Constants$root.C_INT$LAYOUT).withName("__glibc_reserved1")
    ).withName("_libc_fpstate");
    public static MemoryLayout $LAYOUT() {
        return _libc_fpstate.$struct$LAYOUT;
    }
    static final VarHandle __cwd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__cwd"));
    public static VarHandle __cwd$VH() {
        return _libc_fpstate.__cwd$VH;
    }
    public static short __cwd$get(MemorySegment seg) {
        return (short)_libc_fpstate.__cwd$VH.get(seg);
    }
    public static void __cwd$set( MemorySegment seg, short x) {
        _libc_fpstate.__cwd$VH.set(seg, x);
    }
    public static short __cwd$get(MemorySegment seg, long index) {
        return (short)_libc_fpstate.__cwd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __cwd$set(MemorySegment seg, long index, short x) {
        _libc_fpstate.__cwd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __swd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__swd"));
    public static VarHandle __swd$VH() {
        return _libc_fpstate.__swd$VH;
    }
    public static short __swd$get(MemorySegment seg) {
        return (short)_libc_fpstate.__swd$VH.get(seg);
    }
    public static void __swd$set( MemorySegment seg, short x) {
        _libc_fpstate.__swd$VH.set(seg, x);
    }
    public static short __swd$get(MemorySegment seg, long index) {
        return (short)_libc_fpstate.__swd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __swd$set(MemorySegment seg, long index, short x) {
        _libc_fpstate.__swd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __ftw$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__ftw"));
    public static VarHandle __ftw$VH() {
        return _libc_fpstate.__ftw$VH;
    }
    public static short __ftw$get(MemorySegment seg) {
        return (short)_libc_fpstate.__ftw$VH.get(seg);
    }
    public static void __ftw$set( MemorySegment seg, short x) {
        _libc_fpstate.__ftw$VH.set(seg, x);
    }
    public static short __ftw$get(MemorySegment seg, long index) {
        return (short)_libc_fpstate.__ftw$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __ftw$set(MemorySegment seg, long index, short x) {
        _libc_fpstate.__ftw$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __fop$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__fop"));
    public static VarHandle __fop$VH() {
        return _libc_fpstate.__fop$VH;
    }
    public static short __fop$get(MemorySegment seg) {
        return (short)_libc_fpstate.__fop$VH.get(seg);
    }
    public static void __fop$set( MemorySegment seg, short x) {
        _libc_fpstate.__fop$VH.set(seg, x);
    }
    public static short __fop$get(MemorySegment seg, long index) {
        return (short)_libc_fpstate.__fop$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __fop$set(MemorySegment seg, long index, short x) {
        _libc_fpstate.__fop$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__rip"));
    public static VarHandle __rip$VH() {
        return _libc_fpstate.__rip$VH;
    }
    public static long __rip$get(MemorySegment seg) {
        return (long)_libc_fpstate.__rip$VH.get(seg);
    }
    public static void __rip$set( MemorySegment seg, long x) {
        _libc_fpstate.__rip$VH.set(seg, x);
    }
    public static long __rip$get(MemorySegment seg, long index) {
        return (long)_libc_fpstate.__rip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rip$set(MemorySegment seg, long index, long x) {
        _libc_fpstate.__rip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __rdp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__rdp"));
    public static VarHandle __rdp$VH() {
        return _libc_fpstate.__rdp$VH;
    }
    public static long __rdp$get(MemorySegment seg) {
        return (long)_libc_fpstate.__rdp$VH.get(seg);
    }
    public static void __rdp$set( MemorySegment seg, long x) {
        _libc_fpstate.__rdp$VH.set(seg, x);
    }
    public static long __rdp$get(MemorySegment seg, long index) {
        return (long)_libc_fpstate.__rdp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __rdp$set(MemorySegment seg, long index, long x) {
        _libc_fpstate.__rdp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __mxcsr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__mxcsr"));
    public static VarHandle __mxcsr$VH() {
        return _libc_fpstate.__mxcsr$VH;
    }
    public static int __mxcsr$get(MemorySegment seg) {
        return (int)_libc_fpstate.__mxcsr$VH.get(seg);
    }
    public static void __mxcsr$set( MemorySegment seg, int x) {
        _libc_fpstate.__mxcsr$VH.set(seg, x);
    }
    public static int __mxcsr$get(MemorySegment seg, long index) {
        return (int)_libc_fpstate.__mxcsr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __mxcsr$set(MemorySegment seg, long index, int x) {
        _libc_fpstate.__mxcsr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __mxcr_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__mxcr_mask"));
    public static VarHandle __mxcr_mask$VH() {
        return _libc_fpstate.__mxcr_mask$VH;
    }
    public static int __mxcr_mask$get(MemorySegment seg) {
        return (int)_libc_fpstate.__mxcr_mask$VH.get(seg);
    }
    public static void __mxcr_mask$set( MemorySegment seg, int x) {
        _libc_fpstate.__mxcr_mask$VH.set(seg, x);
    }
    public static int __mxcr_mask$get(MemorySegment seg, long index) {
        return (int)_libc_fpstate.__mxcr_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __mxcr_mask$set(MemorySegment seg, long index, int x) {
        _libc_fpstate.__mxcr_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment _st$slice(MemorySegment seg) {
        return seg.asSlice(32, 128);
    }
    public static MemorySegment _xmm$slice(MemorySegment seg) {
        return seg.asSlice(160, 256);
    }
    public static MemorySegment __glibc_reserved1$slice(MemorySegment seg) {
        return seg.asSlice(416, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


