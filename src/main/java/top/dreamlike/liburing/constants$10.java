// Generated by jextract

package top.dreamlike.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$10 {

    static final FunctionDescriptor sigstack$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sigstack$MH = RuntimeHelper.downcallHandle(
        "sigstack",
        constants$10.sigstack$FUNC
    );
    static final FunctionDescriptor sighold$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle sighold$MH = RuntimeHelper.downcallHandle(
        "sighold",
        constants$10.sighold$FUNC
    );
    static final FunctionDescriptor sigrelse$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle sigrelse$MH = RuntimeHelper.downcallHandle(
        "sigrelse",
        constants$10.sigrelse$FUNC
    );
    static final FunctionDescriptor sigignore$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle sigignore$MH = RuntimeHelper.downcallHandle(
        "sigignore",
        constants$10.sigignore$FUNC
    );
    static final FunctionDescriptor sigset$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sigset$MH = RuntimeHelper.downcallHandle(
        "sigset",
        constants$10.sigset$FUNC
    );
    static final FunctionDescriptor pthread_sigmask$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pthread_sigmask$MH = RuntimeHelper.downcallHandle(
        "pthread_sigmask",
        constants$10.pthread_sigmask$FUNC
    );
}


