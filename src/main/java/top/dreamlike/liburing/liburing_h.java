// Generated by jextract

package top.dreamlike.liburing;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class liburing_h extends liburing_h_1 {

    /* package-private */ liburing_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _SYS_SOCKET_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)31L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __LONG_DOUBLE_USES_FLOAT128() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __iovec_defined() {
        return (int)1L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int PF_UNSPEC() {
        return (int)0L;
    }
    public static int PF_LOCAL() {
        return (int)1L;
    }
    public static int PF_INET() {
        return (int)2L;
    }
    public static int PF_AX25() {
        return (int)3L;
    }
    public static int PF_IPX() {
        return (int)4L;
    }
    public static int PF_APPLETALK() {
        return (int)5L;
    }
    public static int PF_NETROM() {
        return (int)6L;
    }
    public static int PF_BRIDGE() {
        return (int)7L;
    }
    public static int PF_ATMPVC() {
        return (int)8L;
    }
    public static int PF_X25() {
        return (int)9L;
    }
    public static int PF_INET6() {
        return (int)10L;
    }
    public static int PF_ROSE() {
        return (int)11L;
    }
    public static int PF_DECnet() {
        return (int)12L;
    }
    public static int PF_NETBEUI() {
        return (int)13L;
    }
    public static int PF_SECURITY() {
        return (int)14L;
    }
    public static int PF_KEY() {
        return (int)15L;
    }
    public static int PF_NETLINK() {
        return (int)16L;
    }
    public static int PF_PACKET() {
        return (int)17L;
    }
    public static int PF_ASH() {
        return (int)18L;
    }
    public static int PF_ECONET() {
        return (int)19L;
    }
    public static int PF_ATMSVC() {
        return (int)20L;
    }
    public static int PF_RDS() {
        return (int)21L;
    }
    public static int PF_SNA() {
        return (int)22L;
    }
    public static int PF_IRDA() {
        return (int)23L;
    }
    public static int PF_PPPOX() {
        return (int)24L;
    }
    public static int PF_WANPIPE() {
        return (int)25L;
    }
    public static int PF_LLC() {
        return (int)26L;
    }
    public static int PF_IB() {
        return (int)27L;
    }
    public static int PF_MPLS() {
        return (int)28L;
    }
    public static int PF_CAN() {
        return (int)29L;
    }
    public static int PF_TIPC() {
        return (int)30L;
    }
    public static int PF_BLUETOOTH() {
        return (int)31L;
    }
    public static int PF_IUCV() {
        return (int)32L;
    }
    public static int PF_RXRPC() {
        return (int)33L;
    }
    public static int PF_ISDN() {
        return (int)34L;
    }
    public static int PF_PHONET() {
        return (int)35L;
    }
    public static int PF_IEEE802154() {
        return (int)36L;
    }
    public static int PF_CAIF() {
        return (int)37L;
    }
    public static int PF_ALG() {
        return (int)38L;
    }
    public static int PF_NFC() {
        return (int)39L;
    }
    public static int PF_VSOCK() {
        return (int)40L;
    }
    public static int PF_KCM() {
        return (int)41L;
    }
    public static int PF_QIPCRTR() {
        return (int)42L;
    }
    public static int PF_SMC() {
        return (int)43L;
    }
    public static int PF_XDP() {
        return (int)44L;
    }
    public static int PF_MAX() {
        return (int)45L;
    }
    public static int SOL_RAW() {
        return (int)255L;
    }
    public static int SOL_DECNET() {
        return (int)261L;
    }
    public static int SOL_X25() {
        return (int)262L;
    }
    public static int SOL_PACKET() {
        return (int)263L;
    }
    public static int SOL_ATM() {
        return (int)264L;
    }
    public static int SOL_AAL() {
        return (int)265L;
    }
    public static int SOL_IRDA() {
        return (int)266L;
    }
    public static int SOL_NETBEUI() {
        return (int)267L;
    }
    public static int SOL_LLC() {
        return (int)268L;
    }
    public static int SOL_DCCP() {
        return (int)269L;
    }
    public static int SOL_NETLINK() {
        return (int)270L;
    }
    public static int SOL_TIPC() {
        return (int)271L;
    }
    public static int SOL_RXRPC() {
        return (int)272L;
    }
    public static int SOL_PPPOL2TP() {
        return (int)273L;
    }
    public static int SOL_BLUETOOTH() {
        return (int)274L;
    }
    public static int SOL_PNPIPE() {
        return (int)275L;
    }
    public static int SOL_RDS() {
        return (int)276L;
    }
    public static int SOL_IUCV() {
        return (int)277L;
    }
    public static int SOL_CAIF() {
        return (int)278L;
    }
    public static int SOL_ALG() {
        return (int)279L;
    }
    public static int SOL_NFC() {
        return (int)280L;
    }
    public static int SOL_KCM() {
        return (int)281L;
    }
    public static int SOL_TLS() {
        return (int)282L;
    }
    public static int SOL_XDP() {
        return (int)283L;
    }
    public static int SOMAXCONN() {
        return (int)4096L;
    }
    public static int _BITS_SOCKADDR_H() {
        return (int)1L;
    }
    public static int _SS_SIZE() {
        return (int)128L;
    }
    public static int __BITS_PER_LONG() {
        return (int)64L;
    }
    public static int FIOSETOWN() {
        return (int)35073L;
    }
    public static int SIOCSPGRP() {
        return (int)35074L;
    }
    public static int FIOGETOWN() {
        return (int)35075L;
    }
    public static int SIOCGPGRP() {
        return (int)35076L;
    }
    public static int SIOCATMARK() {
        return (int)35077L;
    }
    public static int SIOCGSTAMP_OLD() {
        return (int)35078L;
    }
    public static int SIOCGSTAMPNS_OLD() {
        return (int)35079L;
    }
    public static int SOL_SOCKET() {
        return (int)1L;
    }
    public static int SO_DEBUG() {
        return (int)1L;
    }
    public static int SO_REUSEADDR() {
        return (int)2L;
    }
    public static int SO_TYPE() {
        return (int)3L;
    }
    public static int SO_ERROR() {
        return (int)4L;
    }
    public static int SO_DONTROUTE() {
        return (int)5L;
    }
    public static int SO_BROADCAST() {
        return (int)6L;
    }
    public static int SO_SNDBUF() {
        return (int)7L;
    }
    public static int SO_RCVBUF() {
        return (int)8L;
    }
    public static int SO_SNDBUFFORCE() {
        return (int)32L;
    }
    public static int SO_RCVBUFFORCE() {
        return (int)33L;
    }
    public static int SO_KEEPALIVE() {
        return (int)9L;
    }
    public static int SO_OOBINLINE() {
        return (int)10L;
    }
    public static int SO_NO_CHECK() {
        return (int)11L;
    }
    public static int SO_PRIORITY() {
        return (int)12L;
    }
    public static int SO_LINGER() {
        return (int)13L;
    }
    public static int SO_BSDCOMPAT() {
        return (int)14L;
    }
    public static int SO_REUSEPORT() {
        return (int)15L;
    }
    public static int SO_PASSCRED() {
        return (int)16L;
    }
    public static int SO_PEERCRED() {
        return (int)17L;
    }
    public static int SO_RCVLOWAT() {
        return (int)18L;
    }
    public static int SO_SNDLOWAT() {
        return (int)19L;
    }
    public static int SO_RCVTIMEO_OLD() {
        return (int)20L;
    }
    public static int SO_SNDTIMEO_OLD() {
        return (int)21L;
    }
    public static int SO_SECURITY_AUTHENTICATION() {
        return (int)22L;
    }
    public static int SO_SECURITY_ENCRYPTION_TRANSPORT() {
        return (int)23L;
    }
    public static int SO_SECURITY_ENCRYPTION_NETWORK() {
        return (int)24L;
    }
    public static int SO_BINDTODEVICE() {
        return (int)25L;
    }
    public static int SO_ATTACH_FILTER() {
        return (int)26L;
    }
    public static int SO_DETACH_FILTER() {
        return (int)27L;
    }
    public static int SO_PEERNAME() {
        return (int)28L;
    }
    public static int SO_ACCEPTCONN() {
        return (int)30L;
    }
    public static int SO_PEERSEC() {
        return (int)31L;
    }
    public static int SO_PASSSEC() {
        return (int)34L;
    }
    public static int SO_MARK() {
        return (int)36L;
    }
    public static int SO_PROTOCOL() {
        return (int)38L;
    }
    public static int SO_DOMAIN() {
        return (int)39L;
    }
    public static int SO_RXQ_OVFL() {
        return (int)40L;
    }
    public static int SO_WIFI_STATUS() {
        return (int)41L;
    }
    public static int SO_PEEK_OFF() {
        return (int)42L;
    }
    public static int SO_NOFCS() {
        return (int)43L;
    }
    public static int SO_LOCK_FILTER() {
        return (int)44L;
    }
    public static int SO_SELECT_ERR_QUEUE() {
        return (int)45L;
    }
    public static int SO_BUSY_POLL() {
        return (int)46L;
    }
    public static int SO_MAX_PACING_RATE() {
        return (int)47L;
    }
    public static int SO_BPF_EXTENSIONS() {
        return (int)48L;
    }
    public static int SO_INCOMING_CPU() {
        return (int)49L;
    }
    public static int SO_ATTACH_BPF() {
        return (int)50L;
    }
    public static int SO_ATTACH_REUSEPORT_CBPF() {
        return (int)51L;
    }
    public static int SO_ATTACH_REUSEPORT_EBPF() {
        return (int)52L;
    }
    public static int SO_CNX_ADVICE() {
        return (int)53L;
    }
    public static int SCM_TIMESTAMPING_OPT_STATS() {
        return (int)54L;
    }
    public static int SO_MEMINFO() {
        return (int)55L;
    }
    public static int SO_INCOMING_NAPI_ID() {
        return (int)56L;
    }
    public static int SO_COOKIE() {
        return (int)57L;
    }
    public static int SCM_TIMESTAMPING_PKTINFO() {
        return (int)58L;
    }
    public static int SO_PEERGROUPS() {
        return (int)59L;
    }
    public static int SO_ZEROCOPY() {
        return (int)60L;
    }
    public static int SO_TXTIME() {
        return (int)61L;
    }
    public static int SO_BINDTOIFINDEX() {
        return (int)62L;
    }
    public static int SO_TIMESTAMP_OLD() {
        return (int)29L;
    }
    public static int SO_TIMESTAMPNS_OLD() {
        return (int)35L;
    }
    public static int SO_TIMESTAMPING_OLD() {
        return (int)37L;
    }
    public static int SO_TIMESTAMP_NEW() {
        return (int)63L;
    }
    public static int SO_TIMESTAMPNS_NEW() {
        return (int)64L;
    }
    public static int SO_TIMESTAMPING_NEW() {
        return (int)65L;
    }
    public static int SO_RCVTIMEO_NEW() {
        return (int)66L;
    }
    public static int SO_SNDTIMEO_NEW() {
        return (int)67L;
    }
    public static int SO_DETACH_REUSEPORT_BPF() {
        return (int)68L;
    }
    public static int __osockaddr_defined() {
        return (int)1L;
    }
    public static int _SYS_UIO_H() {
        return (int)1L;
    }
    public static int _BITS_UIO_LIM_H() {
        return (int)1L;
    }
    public static int __IOV_MAX() {
        return (int)1024L;
    }
    public static int _BITS_SIGNUM_H() {
        return (int)1L;
    }
    public static int _BITS_SIGNUM_GENERIC_H() {
        return (int)1L;
    }
    public static int SIGINT() {
        return (int)2L;
    }
    public static int SIGILL() {
        return (int)4L;
    }
    public static int SIGABRT() {
        return (int)6L;
    }
    public static int SIGFPE() {
        return (int)8L;
    }
    public static int SIGSEGV() {
        return (int)11L;
    }
    public static int SIGTERM() {
        return (int)15L;
    }
    public static int SIGHUP() {
        return (int)1L;
    }
    public static int SIGQUIT() {
        return (int)3L;
    }
    public static int SIGTRAP() {
        return (int)5L;
    }
    public static int SIGKILL() {
        return (int)9L;
    }
    public static int SIGBUS() {
        return (int)10L;
    }
    public static int SIGSYS() {
        return (int)12L;
    }
    public static int SIGPIPE() {
        return (int)13L;
    }
    public static int SIGALRM() {
        return (int)14L;
    }
    public static int SIGURG() {
        return (int)16L;
    }
    public static int SIGSTOP() {
        return (int)17L;
    }
    public static int SIGTSTP() {
        return (int)18L;
    }
    public static int SIGCONT() {
        return (int)19L;
    }
    public static int SIGCHLD() {
        return (int)20L;
    }
    public static int SIGTTIN() {
        return (int)21L;
    }
    public static int SIGTTOU() {
        return (int)22L;
    }
    public static int SIGPOLL() {
        return (int)23L;
    }
    public static int SIGXCPU() {
        return (int)24L;
    }
    public static int SIGXFSZ() {
        return (int)25L;
    }
    public static int SIGVTALRM() {
        return (int)26L;
    }
    public static int SIGPROF() {
        return (int)27L;
    }
    public static int SIGUSR1() {
        return (int)30L;
    }
    public static int SIGUSR2() {
        return (int)31L;
    }
    public static int SIGWINCH() {
        return (int)28L;
    }
    public static int __SIGRTMIN() {
        return (int)32L;
    }
    public static int SIGSTKFLT() {
        return (int)16L;
    }
    public static int SIGPWR() {
        return (int)30L;
    }
    public static int __SIGRTMAX() {
        return (int)64L;
    }
    public static int __sig_atomic_t_defined() {
        return (int)1L;
    }
    public static int __siginfo_t_defined() {
        return (int)1L;
    }
    public static int __SI_MAX_SIZE() {
        return (int)128L;
    }
    public static int _BITS_SIGINFO_ARCH_H() {
        return (int)1L;
    }
    public static int __SI_ERRNO_THEN_CODE() {
        return (int)1L;
    }
    public static int __SI_HAVE_SIGSYS() {
        return (int)1L;
    }
    public static int _BITS_SIGINFO_CONSTS_H() {
        return (int)1L;
    }
    public static int __SI_ASYNCIO_AFTER_SIGIO() {
        return (int)1L;
    }
    public static int __sigevent_t_defined() {
        return (int)1L;
    }
    public static int __SIGEV_MAX_SIZE() {
        return (int)64L;
    }
    public static int _BITS_SIGEVENT_CONSTS_H() {
        return (int)1L;
    }
    public static int _BITS_SIGACTION_H() {
        return (int)1L;
    }
    public static int SA_NOCLDSTOP() {
        return (int)1L;
    }
    public static int SA_NOCLDWAIT() {
        return (int)2L;
    }
    public static int SA_SIGINFO() {
        return (int)4L;
    }
    public static int SA_ONSTACK() {
        return (int)134217728L;
    }
    public static int SA_RESTART() {
        return (int)268435456L;
    }
    public static int SA_NODEFER() {
        return (int)1073741824L;
    }
    public static int SA_INTERRUPT() {
        return (int)536870912L;
    }
    public static int SIG_BLOCK() {
        return (int)0L;
    }
    public static int SIG_UNBLOCK() {
        return (int)1L;
    }
    public static int SIG_SETMASK() {
        return (int)2L;
    }
    public static int _BITS_SIGCONTEXT_H() {
        return (int)1L;
    }
    public static int __stack_t_defined() {
        return (int)1L;
    }
    public static int _SYS_UCONTEXT_H() {
        return (int)1L;
    }
    public static int __NGREG() {
        return (int)23L;
    }
    public static int _BITS_SIGSTACK_H() {
        return (int)1L;
    }
    public static int MINSIGSTKSZ() {
        return (int)2048L;
    }
    public static int SIGSTKSZ() {
        return (int)8192L;
    }
    public static int _BITS_SS_FLAGS_H() {
        return (int)1L;
    }
    public static int __sigstack_defined() {
        return (int)1L;
    }
    public static int _BITS_SIGTHREAD_H() {
        return (int)1L;
    }
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int NR_OPEN() {
        return (int)1024L;
    }
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    public static int ARG_MAX() {
        return (int)131072L;
    }
    public static int LINK_MAX() {
        return (int)127L;
    }
    public static int MAX_CANON() {
        return (int)255L;
    }
    public static int MAX_INPUT() {
        return (int)255L;
    }
    public static int NAME_MAX() {
        return (int)255L;
    }
    public static int PATH_MAX() {
        return (int)4096L;
    }
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    public static int _IOC_NRBITS() {
        return (int)8L;
    }
    public static int _IOC_TYPEBITS() {
        return (int)8L;
    }
    public static int _IOC_SIZEBITS() {
        return (int)14L;
    }
    public static int _IOC_DIRBITS() {
        return (int)2L;
    }
    public static int _IOC_NRSHIFT() {
        return (int)0L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_4() {
        return (int)0L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_8() {
        return (int)1L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_16() {
        return (int)2L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_32() {
        return (int)3L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_MASK() {
        return (int)3L;
    }
    public static int FSCRYPT_POLICY_FLAG_DIRECT_KEY() {
        return (int)4L;
    }
    public static int FSCRYPT_MODE_AES_256_XTS() {
        return (int)1L;
    }
    public static int FSCRYPT_MODE_AES_256_CTS() {
        return (int)4L;
    }
    public static int FSCRYPT_MODE_AES_128_CBC() {
        return (int)5L;
    }
    public static int FSCRYPT_MODE_AES_128_CTS() {
        return (int)6L;
    }
    public static int FSCRYPT_MODE_ADIANTUM() {
        return (int)9L;
    }
    public static int FSCRYPT_POLICY_V1() {
        return (int)0L;
    }
    public static int FSCRYPT_KEY_DESCRIPTOR_SIZE() {
        return (int)8L;
    }
    public static int FSCRYPT_KEY_DESC_PREFIX_SIZE() {
        return (int)8L;
    }
    public static int FSCRYPT_MAX_KEY_SIZE() {
        return (int)64L;
    }
    public static int FSCRYPT_POLICY_V2() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_IDENTIFIER_SIZE() {
        return (int)16L;
    }
    public static int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR() {
        return (int)1L;
    }
    public static int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY() {
        return (int)1L;
    }
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_STATUS_ABSENT() {
        return (int)1L;
    }
    public static int FSCRYPT_KEY_STATUS_PRESENT() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED() {
        return (int)3L;
    }
    public static int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF() {
        return (int)1L;
    }
    public static int FS_POLICY_FLAGS_VALID() {
        return (int)7L;
    }
    public static int FS_ENCRYPTION_MODE_INVALID() {
        return (int)0L;
    }
    public static int FS_ENCRYPTION_MODE_AES_256_GCM() {
        return (int)2L;
    }
    public static int FS_ENCRYPTION_MODE_AES_256_CBC() {
        return (int)3L;
    }
    public static int FS_ENCRYPTION_MODE_SPECK128_256_XTS() {
        return (int)7L;
    }
    public static int FS_ENCRYPTION_MODE_SPECK128_256_CTS() {
        return (int)8L;
    }
    public static int MS_RDONLY() {
        return (int)1L;
    }
    public static int MS_NOSUID() {
        return (int)2L;
    }
    public static int MS_NODEV() {
        return (int)4L;
    }
    public static int MS_NOEXEC() {
        return (int)8L;
    }
    public static int MS_SYNCHRONOUS() {
        return (int)16L;
    }
    public static int MS_REMOUNT() {
        return (int)32L;
    }
    public static int MS_MANDLOCK() {
        return (int)64L;
    }
    public static int MS_DIRSYNC() {
        return (int)128L;
    }
    public static int MS_NOATIME() {
        return (int)1024L;
    }
    public static int MS_NODIRATIME() {
        return (int)2048L;
    }
    public static int MS_BIND() {
        return (int)4096L;
    }
    public static int MS_MOVE() {
        return (int)8192L;
    }
    public static int MS_REC() {
        return (int)16384L;
    }
    public static int MS_VERBOSE() {
        return (int)32768L;
    }
    public static int MS_SILENT() {
        return (int)32768L;
    }
    public static int OPEN_TREE_CLONE() {
        return (int)1L;
    }
    public static int MOVE_MOUNT_F_SYMLINKS() {
        return (int)1L;
    }
    public static int MOVE_MOUNT_F_AUTOMOUNTS() {
        return (int)2L;
    }
    public static int MOVE_MOUNT_F_EMPTY_PATH() {
        return (int)4L;
    }
    public static int MOVE_MOUNT_T_SYMLINKS() {
        return (int)16L;
    }
    public static int MOVE_MOUNT_T_AUTOMOUNTS() {
        return (int)32L;
    }
    public static int MOVE_MOUNT_T_EMPTY_PATH() {
        return (int)64L;
    }
    public static int MOVE_MOUNT__MASK() {
        return (int)119L;
    }
    public static int FSOPEN_CLOEXEC() {
        return (int)1L;
    }
    public static int FSPICK_CLOEXEC() {
        return (int)1L;
    }
    public static int FSPICK_SYMLINK_NOFOLLOW() {
        return (int)2L;
    }
    public static int FSPICK_NO_AUTOMOUNT() {
        return (int)4L;
    }
    public static int FSPICK_EMPTY_PATH() {
        return (int)8L;
    }
    public static int FSMOUNT_CLOEXEC() {
        return (int)1L;
    }
    public static int MOUNT_ATTR_RDONLY() {
        return (int)1L;
    }
    public static int MOUNT_ATTR_NOSUID() {
        return (int)2L;
    }
    public static int MOUNT_ATTR_NODEV() {
        return (int)4L;
    }
    public static int MOUNT_ATTR_NOEXEC() {
        return (int)8L;
    }
    public static int MOUNT_ATTR__ATIME() {
        return (int)112L;
    }
    public static int MOUNT_ATTR_RELATIME() {
        return (int)0L;
    }
    public static int MOUNT_ATTR_NOATIME() {
        return (int)16L;
    }
    public static int MOUNT_ATTR_STRICTATIME() {
        return (int)32L;
    }
    public static int MOUNT_ATTR_NODIRATIME() {
        return (int)128L;
    }
    public static int INR_OPEN_CUR() {
        return (int)1024L;
    }
    public static int INR_OPEN_MAX() {
        return (int)4096L;
    }
    public static int BLOCK_SIZE_BITS() {
        return (int)10L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int SEEK_DATA() {
        return (int)3L;
    }
    public static int SEEK_HOLE() {
        return (int)4L;
    }
    public static int FILE_DEDUPE_RANGE_SAME() {
        return (int)0L;
    }
    public static int FILE_DEDUPE_RANGE_DIFFERS() {
        return (int)1L;
    }
    public static int NR_FILE() {
        return (int)8192L;
    }
    public static int FS_XFLAG_REALTIME() {
        return (int)1L;
    }
    public static int FS_XFLAG_PREALLOC() {
        return (int)2L;
    }
    public static int FS_XFLAG_IMMUTABLE() {
        return (int)8L;
    }
    public static int FS_XFLAG_APPEND() {
        return (int)16L;
    }
    public static int FS_XFLAG_SYNC() {
        return (int)32L;
    }
    public static int FS_XFLAG_NOATIME() {
        return (int)64L;
    }
    public static int FS_XFLAG_NODUMP() {
        return (int)128L;
    }
    public static int FS_XFLAG_RTINHERIT() {
        return (int)256L;
    }
    public static int FS_XFLAG_PROJINHERIT() {
        return (int)512L;
    }
    public static int FS_XFLAG_NOSYMLINKS() {
        return (int)1024L;
    }
    public static int FS_XFLAG_EXTSIZE() {
        return (int)2048L;
    }
    public static int FS_XFLAG_EXTSZINHERIT() {
        return (int)4096L;
    }
    public static int FS_XFLAG_NODEFRAG() {
        return (int)8192L;
    }
    public static int FS_XFLAG_FILESTREAM() {
        return (int)16384L;
    }
    public static int FS_XFLAG_DAX() {
        return (int)32768L;
    }
    public static int FS_XFLAG_COWEXTSIZE() {
        return (int)65536L;
    }
    public static int BMAP_IOCTL() {
        return (int)1L;
    }
    public static int FSLABEL_MAX() {
        return (int)256L;
    }
    public static int FS_SECRM_FL() {
        return (int)1L;
    }
    public static int FS_UNRM_FL() {
        return (int)2L;
    }
    public static int FS_COMPR_FL() {
        return (int)4L;
    }
    public static int FS_SYNC_FL() {
        return (int)8L;
    }
    public static int FS_IMMUTABLE_FL() {
        return (int)16L;
    }
    public static int FS_APPEND_FL() {
        return (int)32L;
    }
    public static int FS_NODUMP_FL() {
        return (int)64L;
    }
    public static int FS_NOATIME_FL() {
        return (int)128L;
    }
    public static int FS_DIRTY_FL() {
        return (int)256L;
    }
    public static int FS_COMPRBLK_FL() {
        return (int)512L;
    }
    public static int FS_NOCOMP_FL() {
        return (int)1024L;
    }
    public static int FS_ENCRYPT_FL() {
        return (int)2048L;
    }
    public static int FS_BTREE_FL() {
        return (int)4096L;
    }
    public static int FS_INDEX_FL() {
        return (int)4096L;
    }
    public static int FS_IMAGIC_FL() {
        return (int)8192L;
    }
    public static int FS_JOURNAL_DATA_FL() {
        return (int)16384L;
    }
    public static int FS_NOTAIL_FL() {
        return (int)32768L;
    }
    public static int FS_DIRSYNC_FL() {
        return (int)65536L;
    }
    public static int FS_TOPDIR_FL() {
        return (int)131072L;
    }
    public static int FS_HUGE_FILE_FL() {
        return (int)262144L;
    }
    public static int FS_EXTENT_FL() {
        return (int)524288L;
    }
    public static int FS_VERITY_FL() {
        return (int)1048576L;
    }
    public static int FS_EA_INODE_FL() {
        return (int)2097152L;
    }
    public static int FS_EOFBLOCKS_FL() {
        return (int)4194304L;
    }
    public static int FS_NOCOW_FL() {
        return (int)8388608L;
    }
    public static int FS_INLINE_DATA_FL() {
        return (int)268435456L;
    }
    public static int FS_PROJINHERIT_FL() {
        return (int)536870912L;
    }
    public static int FS_CASEFOLD_FL() {
        return (int)1073741824L;
    }
    public static int FS_FL_USER_VISIBLE() {
        return (int)253951L;
    }
    public static int FS_FL_USER_MODIFIABLE() {
        return (int)229631L;
    }
    public static int SYNC_FILE_RANGE_WAIT_BEFORE() {
        return (int)1L;
    }
    public static int SYNC_FILE_RANGE_WRITE() {
        return (int)2L;
    }
    public static int SYNC_FILE_RANGE_WAIT_AFTER() {
        return (int)4L;
    }
    public static int IORING_OP_NOP() {
        return (int)0L;
    }
    public static int IORING_OP_READV() {
        return (int)1L;
    }
    public static int IORING_OP_WRITEV() {
        return (int)2L;
    }
    public static int IORING_OP_FSYNC() {
        return (int)3L;
    }
    public static int IORING_OP_READ_FIXED() {
        return (int)4L;
    }
    public static int IORING_OP_WRITE_FIXED() {
        return (int)5L;
    }
    public static int IORING_OP_POLL_ADD() {
        return (int)6L;
    }
    public static int IORING_OP_POLL_REMOVE() {
        return (int)7L;
    }
    public static int IORING_OP_SYNC_FILE_RANGE() {
        return (int)8L;
    }
    public static int IORING_OP_SENDMSG() {
        return (int)9L;
    }
    public static int IORING_OP_RECVMSG() {
        return (int)10L;
    }
    public static int IORING_OP_TIMEOUT() {
        return (int)11L;
    }
    public static int IORING_OP_TIMEOUT_REMOVE() {
        return (int)12L;
    }
    public static int IORING_OP_ACCEPT() {
        return (int)13L;
    }
    public static int IORING_REGISTER_BUFFERS() {
        return (int)0L;
    }
    public static int IORING_UNREGISTER_BUFFERS() {
        return (int)1L;
    }
    public static int IORING_REGISTER_FILES() {
        return (int)2L;
    }
    public static int IORING_UNREGISTER_FILES() {
        return (int)3L;
    }
    public static int IORING_REGISTER_EVENTFD() {
        return (int)4L;
    }
    public static int IORING_UNREGISTER_EVENTFD() {
        return (int)5L;
    }
    public static int IORING_REGISTER_FILES_UPDATE() {
        return (int)6L;
    }
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    public static int SOCK_RAW() {
        return (int)3L;
    }
    public static int SOCK_RDM() {
        return (int)4L;
    }
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    public static int SOCK_DCCP() {
        return (int)6L;
    }
    public static int SOCK_PACKET() {
        return (int)10L;
    }
    public static int SOCK_CLOEXEC() {
        return (int)524288L;
    }
    public static int SOCK_NONBLOCK() {
        return (int)2048L;
    }
    public static int MSG_OOB() {
        return (int)1L;
    }
    public static int MSG_PEEK() {
        return (int)2L;
    }
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int MSG_CTRUNC() {
        return (int)8L;
    }
    public static int MSG_PROXY() {
        return (int)16L;
    }
    public static int MSG_TRUNC() {
        return (int)32L;
    }
    public static int MSG_DONTWAIT() {
        return (int)64L;
    }
    public static int MSG_EOR() {
        return (int)128L;
    }
    public static int MSG_WAITALL() {
        return (int)256L;
    }
    public static int MSG_FIN() {
        return (int)512L;
    }
    public static int MSG_SYN() {
        return (int)1024L;
    }
    public static int MSG_CONFIRM() {
        return (int)2048L;
    }
    public static int MSG_RST() {
        return (int)4096L;
    }
    public static int MSG_ERRQUEUE() {
        return (int)8192L;
    }
    public static int MSG_NOSIGNAL() {
        return (int)16384L;
    }
    public static int MSG_MORE() {
        return (int)32768L;
    }
    public static int MSG_WAITFORONE() {
        return (int)65536L;
    }
    public static int MSG_BATCH() {
        return (int)262144L;
    }
    public static int MSG_ZEROCOPY() {
        return (int)67108864L;
    }
    public static int MSG_FASTOPEN() {
        return (int)536870912L;
    }
    public static int MSG_CMSG_CLOEXEC() {
        return (int)1073741824L;
    }
    public static MethodHandle __cmsg_nxthdr$MH() {
        return RuntimeHelper.requireNonNull(constants$1.__cmsg_nxthdr$MH,"__cmsg_nxthdr");
    }
    public static MemoryAddress __cmsg_nxthdr ( Addressable __mhdr,  Addressable __cmsg) {
        var mh$ = __cmsg_nxthdr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SCM_RIGHTS() {
        return (int)1L;
    }
    public static OfInt __kernel_key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_mqd_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_ipc_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_timer_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __kernel_caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static int SHUT_RD() {
        return (int)0L;
    }
    public static int SHUT_WR() {
        return (int)1L;
    }
    public static int SHUT_RDWR() {
        return (int)2L;
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1.socket$MH,"socket");
    }
    public static int socket ( int __domain,  int __type,  int __protocol) {
        var mh$ = socket$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socketpair$MH() {
        return RuntimeHelper.requireNonNull(constants$2.socketpair$MH,"socketpair");
    }
    public static int socketpair ( int __domain,  int __type,  int __protocol,  Addressable __fds) {
        var mh$ = socketpair$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$2.bind$MH,"bind");
    }
    public static int bind ( int __fd,  Addressable __addr,  int __len) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$2.getsockname$MH,"getsockname");
    }
    public static int getsockname ( int __fd,  Addressable __addr,  Addressable __len) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$2.connect$MH,"connect");
    }
    public static int connect ( int __fd,  Addressable __addr,  int __len) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$2.getpeername$MH,"getpeername");
    }
    public static int getpeername ( int __fd,  Addressable __addr,  Addressable __len) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$2.send$MH,"send");
    }
    public static long send ( int __fd,  Addressable __buf,  long __n,  int __flags) {
        var mh$ = send$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recv$MH,"recv");
    }
    public static long recv ( int __fd,  Addressable __buf,  long __n,  int __flags) {
        var mh$ = recv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$3.sendto$MH,"sendto");
    }
    public static long sendto ( int __fd,  Addressable __buf,  long __n,  int __flags,  Addressable __addr,  int __addr_len) {
        var mh$ = sendto$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recvfrom$MH,"recvfrom");
    }
    public static long recvfrom ( int __fd,  Addressable __buf,  long __n,  int __flags,  Addressable __addr,  Addressable __addr_len) {
        var mh$ = recvfrom$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$3.sendmsg$MH,"sendmsg");
    }
    public static long sendmsg ( int __fd,  Addressable __message,  int __flags) {
        var mh$ = sendmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$3.recvmsg$MH,"recvmsg");
    }
    public static long recvmsg ( int __fd,  Addressable __message,  int __flags) {
        var mh$ = recvmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$3.getsockopt$MH,"getsockopt");
    }
    public static int getsockopt ( int __fd,  int __level,  int __optname,  Addressable __optval,  Addressable __optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setsockopt$MH,"setsockopt");
    }
    public static int setsockopt ( int __fd,  int __level,  int __optname,  Addressable __optval,  int __optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$4.listen$MH,"listen");
    }
    public static int listen ( int __fd,  int __n) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$4.accept$MH,"accept");
    }
    public static int accept ( int __fd,  Addressable __addr,  Addressable __addr_len) {
        var mh$ = accept$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$4.shutdown$MH,"shutdown");
    }
    public static int shutdown ( int __fd,  int __how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sockatmark$MH() {
        return RuntimeHelper.requireNonNull(constants$4.sockatmark$MH,"sockatmark");
    }
    public static int sockatmark ( int __fd) {
        var mh$ = sockatmark$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isfdtype$MH() {
        return RuntimeHelper.requireNonNull(constants$4.isfdtype$MH,"isfdtype");
    }
    public static int isfdtype ( int __fd,  int __fdtype) {
        var mh$ = isfdtype$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.readv$MH,"readv");
    }
    public static long readv ( int __fd,  Addressable __iovec,  int __count) {
        var mh$ = readv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle writev$MH() {
        return RuntimeHelper.requireNonNull(constants$5.writev$MH,"writev");
    }
    public static long writev ( int __fd,  Addressable __iovec,  int __count) {
        var mh$ = writev$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.preadv$MH,"preadv");
    }
    public static long preadv ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = preadv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev$MH() {
        return RuntimeHelper.requireNonNull(constants$5.pwritev$MH,"pwritev");
    }
    public static long pwritev ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = pwritev$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    public static int SI_TKILL() {
        return (int)-6L;
    }
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    public static int SI_TIMER() {
        return (int)-2L;
    }
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    public static int SI_USER() {
        return (int)0L;
    }
    public static int SI_KERNEL() {
        return (int)128L;
    }
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    public static int ILL_COPROC() {
        return (int)7L;
    }
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    public static int FPE_FLTINV() {
        return (int)7L;
    }
    public static int FPE_FLTSUB() {
        return (int)8L;
    }
    public static int FPE_FLTUNK() {
        return (int)14L;
    }
    public static int FPE_CONDTRAP() {
        return (int)15L;
    }
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    public static int SEGV_BNDERR() {
        return (int)3L;
    }
    public static int SEGV_PKUERR() {
        return (int)4L;
    }
    public static int SEGV_ACCADI() {
        return (int)5L;
    }
    public static int SEGV_ADIDERR() {
        return (int)6L;
    }
    public static int SEGV_ADIPERR() {
        return (int)7L;
    }
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    public static int BUS_MCEERR_AR() {
        return (int)4L;
    }
    public static int BUS_MCEERR_AO() {
        return (int)5L;
    }
    public static int CLD_EXITED() {
        return (int)1L;
    }
    public static int CLD_KILLED() {
        return (int)2L;
    }
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
    public static int CLD_STOPPED() {
        return (int)5L;
    }
    public static int CLD_CONTINUED() {
        return (int)6L;
    }
    public static int POLL_IN() {
        return (int)1L;
    }
    public static int POLL_OUT() {
        return (int)2L;
    }
    public static int POLL_MSG() {
        return (int)3L;
    }
    public static int POLL_ERR() {
        return (int)4L;
    }
    public static int POLL_PRI() {
        return (int)5L;
    }
    public static int POLL_HUP() {
        return (int)6L;
    }
    public static int SIGEV_SIGNAL() {
        return (int)0L;
    }
    public static int SIGEV_NONE() {
        return (int)1L;
    }
    public static int SIGEV_THREAD() {
        return (int)2L;
    }
    public static int SIGEV_THREAD_ID() {
        return (int)4L;
    }
    public static MethodHandle __sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__sysv_signal$MH,"__sysv_signal");
    }
    public static MemoryAddress __sysv_signal ( int __sig,  Addressable __handler) {
        var mh$ = __sysv_signal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$6.signal$MH,"signal");
    }
    public static MemoryAddress signal ( int __sig,  Addressable __handler) {
        var mh$ = signal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kill$MH() {
        return RuntimeHelper.requireNonNull(constants$6.kill$MH,"kill");
    }
    public static int kill ( int __pid,  int __sig) {
        var mh$ = kill$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killpg$MH() {
        return RuntimeHelper.requireNonNull(constants$6.killpg$MH,"killpg");
    }
    public static int killpg ( int __pgrp,  int __sig) {
        var mh$ = killpg$MH();
        try {
            return (int)mh$.invokeExact(__pgrp, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raise$MH() {
        return RuntimeHelper.requireNonNull(constants$6.raise$MH,"raise");
    }
    public static int raise ( int __sig) {
        var mh$ = raise$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ssignal$MH() {
        return RuntimeHelper.requireNonNull(constants$6.ssignal$MH,"ssignal");
    }
    public static MemoryAddress ssignal ( int __sig,  Addressable __handler) {
        var mh$ = ssignal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$7.gsignal$MH,"gsignal");
    }
    public static int gsignal ( int __sig) {
        var mh$ = gsignal$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psignal$MH() {
        return RuntimeHelper.requireNonNull(constants$7.psignal$MH,"psignal");
    }
    public static void psignal ( int __sig,  Addressable __s) {
        var mh$ = psignal$MH();
        try {
            mh$.invokeExact(__sig, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psiginfo$MH() {
        return RuntimeHelper.requireNonNull(constants$7.psiginfo$MH,"psiginfo");
    }
    public static void psiginfo ( Addressable __pinfo,  Addressable __s) {
        var mh$ = psiginfo$MH();
        try {
            mh$.invokeExact(__pinfo, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigblock$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sigblock$MH,"sigblock");
    }
    public static int sigblock ( int __mask) {
        var mh$ = sigblock$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$7.sigsetmask$MH,"sigsetmask");
    }
    public static int sigsetmask ( int __mask) {
        var mh$ = sigsetmask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siggetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$7.siggetmask$MH,"siggetmask");
    }
    public static int siggetmask () {
        var mh$ = siggetmask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sigemptyset$MH,"sigemptyset");
    }
    public static int sigemptyset ( Addressable __set) {
        var mh$ = sigemptyset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigfillset$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sigfillset$MH,"sigfillset");
    }
    public static int sigfillset ( Addressable __set) {
        var mh$ = sigfillset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaddset$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sigaddset$MH,"sigaddset");
    }
    public static int sigaddset ( Addressable __set,  int __signo) {
        var mh$ = sigaddset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigdelset$MH() {
        return RuntimeHelper.requireNonNull(constants$8.sigdelset$MH,"sigdelset");
    }
    public static int sigdelset ( Addressable __set,  int __signo) {
        var mh$ = sigdelset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigismember$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sigismember$MH,"sigismember");
    }
    public static int sigismember ( Addressable __set,  int __signo) {
        var mh$ = sigismember$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigprocmask$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sigprocmask$MH,"sigprocmask");
    }
    public static int sigprocmask ( int __how,  Addressable __set,  Addressable __oset) {
        var mh$ = sigprocmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __set, __oset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsuspend$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sigsuspend$MH,"sigsuspend");
    }
    public static int sigsuspend ( Addressable __set) {
        var mh$ = sigsuspend$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaction$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sigaction$MH,"sigaction");
    }
    public static int sigaction ( int __sig,  Addressable __act,  Addressable __oact) {
        var mh$ = sigaction$MH();
        try {
            return (int)mh$.invokeExact(__sig, __act, __oact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpending$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sigpending$MH,"sigpending");
    }
    public static int sigpending ( Addressable __set) {
        var mh$ = sigpending$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwait$MH() {
        return RuntimeHelper.requireNonNull(constants$9.sigwait$MH,"sigwait");
    }
    public static int sigwait ( Addressable __set,  Addressable __sig) {
        var mh$ = sigwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwaitinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sigwaitinfo$MH,"sigwaitinfo");
    }
    public static int sigwaitinfo ( Addressable __set,  Addressable __info) {
        var mh$ = sigwaitinfo$MH();
        try {
            return (int)mh$.invokeExact(__set, __info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigtimedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sigtimedwait$MH,"sigtimedwait");
    }
    public static int sigtimedwait ( Addressable __set,  Addressable __info,  Addressable __timeout) {
        var mh$ = sigtimedwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __info, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sigqueue$MH,"sigqueue");
    }
    public static int sigqueue ( int __pid,  int __sig,  MemorySegment __val) {
        var mh$ = sigqueue$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment _sys_siglist$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$10._sys_siglist$SEGMENT,"_sys_siglist");
    }
    public static MemorySegment sys_siglist$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$10.sys_siglist$SEGMENT,"sys_siglist");
    }
    public static MethodHandle sigreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sigreturn$MH,"sigreturn");
    }
    public static int sigreturn ( Addressable __scp) {
        var mh$ = sigreturn$MH();
        try {
            return (int)mh$.invokeExact(__scp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong greg_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress fpregset_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle siginterrupt$MH() {
        return RuntimeHelper.requireNonNull(constants$11.siginterrupt$MH,"siginterrupt");
    }
    public static int siginterrupt ( int __sig,  int __interrupt) {
        var mh$ = siginterrupt$MH();
        try {
            return (int)mh$.invokeExact(__sig, __interrupt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SS_ONSTACK() {
        return (int)1L;
    }
    public static int SS_DISABLE() {
        return (int)2L;
    }
    public static MethodHandle sigaltstack$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sigaltstack$MH,"sigaltstack");
    }
    public static int sigaltstack ( Addressable __ss,  Addressable __oss) {
        var mh$ = sigaltstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigstack$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sigstack$MH,"sigstack");
    }
    public static int sigstack ( Addressable __ss,  Addressable __oss) {
        var mh$ = sigstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_sigmask$MH() {
        return RuntimeHelper.requireNonNull(constants$11.pthread_sigmask$MH,"pthread_sigmask");
    }
    public static int pthread_sigmask ( int __how,  Addressable __newmask,  Addressable __oldmask) {
        var mh$ = pthread_sigmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __newmask, __oldmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_kill$MH() {
        return RuntimeHelper.requireNonNull(constants$11.pthread_kill$MH,"pthread_kill");
    }
    public static int pthread_kill ( long __threadid,  int __signo) {
        var mh$ = pthread_kill$MH();
        try {
            return (int)mh$.invokeExact(__threadid, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmin$MH() {
        return RuntimeHelper.requireNonNull(constants$11.__libc_current_sigrtmin$MH,"__libc_current_sigrtmin");
    }
    public static int __libc_current_sigrtmin () {
        var mh$ = __libc_current_sigrtmin$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmax$MH() {
        return RuntimeHelper.requireNonNull(constants$12.__libc_current_sigrtmax$MH,"__libc_current_sigrtmax");
    }
    public static int __libc_current_sigrtmax () {
        var mh$ = __libc_current_sigrtmax$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __gwchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$12.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$12.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$12.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$13.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$13.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$13.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$13.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$14.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$14.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$14.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$14.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$14.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$14.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$15.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$15.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$15.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$15.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$15.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$15.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$15.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$15.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$15.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$15.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$15.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$15.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$15.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$15.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$15.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$16.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$16.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$16.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$16.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$16.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$16.daylight$VH.get(RuntimeHelper.requireNonNull(constants$16.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$16.daylight$VH.set(RuntimeHelper.requireNonNull(constants$16.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$16.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$16.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$16.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$16.timezone$VH.get(RuntimeHelper.requireNonNull(constants$16.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$16.timezone$VH.set(RuntimeHelper.requireNonNull(constants$16.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$16.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$16.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$17.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$17.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$17.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$17.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$17.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$17.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$18.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$18.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$18.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$18.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$18.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$19.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt __kernel_rwf_t = Constants$root.C_INT$LAYOUT;
    public static OfShort __s16 = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __s32 = Constants$root.C_INT$LAYOUT;
    public static OfLong __s64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static int FSCONFIG_SET_FLAG() {
        return (int)0L;
    }
    public static int FSCONFIG_SET_STRING() {
        return (int)1L;
    }
    public static int FSCONFIG_SET_BINARY() {
        return (int)2L;
    }
    public static int FSCONFIG_SET_PATH() {
        return (int)3L;
    }
    public static int FSCONFIG_SET_PATH_EMPTY() {
        return (int)4L;
    }
    public static int FSCONFIG_SET_FD() {
        return (int)5L;
    }
    public static int FSCONFIG_CMD_CREATE() {
        return (int)6L;
    }
    public static int FSCONFIG_CMD_RECONFIGURE() {
        return (int)7L;
    }
    public static OfInt __kernel_rwf_t$0 = Constants$root.C_INT$LAYOUT;
    public static MethodHandle io_uring_setup$MH() {
        return RuntimeHelper.requireNonNull(constants$19.io_uring_setup$MH,"io_uring_setup");
    }
    public static int io_uring_setup ( int entries,  Addressable p) {
        var mh$ = io_uring_setup$MH();
        try {
            return (int)mh$.invokeExact(entries, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_enter$MH() {
        return RuntimeHelper.requireNonNull(constants$19.io_uring_enter$MH,"io_uring_enter");
    }
    public static int io_uring_enter ( int fd,  int to_submit,  int min_complete,  int flags,  Addressable sig) {
        var mh$ = io_uring_enter$MH();
        try {
            return (int)mh$.invokeExact(fd, to_submit, min_complete, flags, sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register$MH() {
        return RuntimeHelper.requireNonNull(constants$19.io_uring_register$MH,"io_uring_register");
    }
    public static int io_uring_register ( int fd,  int opcode,  Addressable arg,  int nr_args) {
        var mh$ = io_uring_register$MH();
        try {
            return (int)mh$.invokeExact(fd, opcode, arg, nr_args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_init_params$MH() {
        return RuntimeHelper.requireNonNull(constants$19.io_uring_queue_init_params$MH,"io_uring_queue_init_params");
    }
    public static int io_uring_queue_init_params ( int entries,  Addressable ring,  Addressable p) {
        var mh$ = io_uring_queue_init_params$MH();
        try {
            return (int)mh$.invokeExact(entries, ring, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_init$MH() {
        return RuntimeHelper.requireNonNull(constants$19.io_uring_queue_init$MH,"io_uring_queue_init");
    }
    public static int io_uring_queue_init ( int entries,  Addressable ring,  int flags) {
        var mh$ = io_uring_queue_init$MH();
        try {
            return (int)mh$.invokeExact(entries, ring, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_mmap$MH() {
        return RuntimeHelper.requireNonNull(constants$20.io_uring_queue_mmap$MH,"io_uring_queue_mmap");
    }
    public static int io_uring_queue_mmap ( int fd,  Addressable p,  Addressable ring) {
        var mh$ = io_uring_queue_mmap$MH();
        try {
            return (int)mh$.invokeExact(fd, p, ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$20.io_uring_queue_exit$MH,"io_uring_queue_exit");
    }
    public static void io_uring_queue_exit ( Addressable ring) {
        var mh$ = io_uring_queue_exit$MH();
        try {
            mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_peek_batch_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$20.io_uring_peek_batch_cqe$MH,"io_uring_peek_batch_cqe");
    }
    public static int io_uring_peek_batch_cqe ( Addressable ring,  Addressable cqes,  int count) {
        var mh$ = io_uring_peek_batch_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqes, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqes$MH() {
        return RuntimeHelper.requireNonNull(constants$20.io_uring_wait_cqes$MH,"io_uring_wait_cqes");
    }
    public static int io_uring_wait_cqes ( Addressable ring,  Addressable cqe_ptr,  int wait_nr,  Addressable ts,  Addressable sigmask) {
        var mh$ = io_uring_wait_cqes$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, wait_nr, ts, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqe_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$20.io_uring_wait_cqe_timeout$MH,"io_uring_wait_cqe_timeout");
    }
    public static int io_uring_wait_cqe_timeout ( Addressable ring,  Addressable cqe_ptr,  Addressable ts) {
        var mh$ = io_uring_wait_cqe_timeout$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, ts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_submit$MH() {
        return RuntimeHelper.requireNonNull(constants$20.io_uring_submit$MH,"io_uring_submit");
    }
    public static int io_uring_submit ( Addressable ring) {
        var mh$ = io_uring_submit$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_submit_and_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$21.io_uring_submit_and_wait$MH,"io_uring_submit_and_wait");
    }
    public static int io_uring_submit_and_wait ( Addressable ring,  int wait_nr) {
        var mh$ = io_uring_submit_and_wait$MH();
        try {
            return (int)mh$.invokeExact(ring, wait_nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_get_sqe$MH() {
        return RuntimeHelper.requireNonNull(constants$21.io_uring_get_sqe$MH,"io_uring_get_sqe");
    }
    public static MemoryAddress io_uring_get_sqe ( Addressable ring) {
        var mh$ = io_uring_get_sqe$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$21.io_uring_register_buffers$MH,"io_uring_register_buffers");
    }
    public static int io_uring_register_buffers ( Addressable ring,  Addressable iovecs,  int nr_iovecs) {
        var mh$ = io_uring_register_buffers$MH();
        try {
            return (int)mh$.invokeExact(ring, iovecs, nr_iovecs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$21.io_uring_unregister_buffers$MH,"io_uring_unregister_buffers");
    }
    public static int io_uring_unregister_buffers ( Addressable ring) {
        var mh$ = io_uring_unregister_buffers$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files$MH() {
        return RuntimeHelper.requireNonNull(constants$21.io_uring_register_files$MH,"io_uring_register_files");
    }
    public static int io_uring_register_files ( Addressable ring,  Addressable files,  int nr_files) {
        var mh$ = io_uring_register_files$MH();
        try {
            return (int)mh$.invokeExact(ring, files, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_files$MH() {
        return RuntimeHelper.requireNonNull(constants$21.io_uring_unregister_files$MH,"io_uring_unregister_files");
    }
    public static int io_uring_unregister_files ( Addressable ring) {
        var mh$ = io_uring_unregister_files$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files_update$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_register_files_update$MH,"io_uring_register_files_update");
    }
    public static int io_uring_register_files_update ( Addressable ring,  int off,  Addressable files,  int nr_files) {
        var mh$ = io_uring_register_files_update$MH();
        try {
            return (int)mh$.invokeExact(ring, off, files, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_eventfd$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_register_eventfd$MH,"io_uring_register_eventfd");
    }
    public static int io_uring_register_eventfd ( Addressable ring,  int fd) {
        var mh$ = io_uring_register_eventfd$MH();
        try {
            return (int)mh$.invokeExact(ring, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_eventfd$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_unregister_eventfd$MH,"io_uring_unregister_eventfd");
    }
    public static int io_uring_unregister_eventfd ( Addressable ring) {
        var mh$ = io_uring_unregister_eventfd$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_get_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__io_uring_get_cqe$MH,"__io_uring_get_cqe");
    }
    public static int __io_uring_get_cqe ( Addressable ring,  Addressable cqe_ptr,  int submit,  int wait_nr,  Addressable sigmask) {
        var mh$ = __io_uring_get_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, submit, wait_nr, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cq_advance$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_cq_advance$MH,"io_uring_cq_advance");
    }
    public static void io_uring_cq_advance ( Addressable ring,  int nr) {
        var mh$ = io_uring_cq_advance$MH();
        try {
            mh$.invokeExact(ring, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cqe_seen$MH() {
        return RuntimeHelper.requireNonNull(constants$22.io_uring_cqe_seen$MH,"io_uring_cqe_seen");
    }
    public static void io_uring_cqe_seen ( Addressable ring,  Addressable cqe) {
        var mh$ = io_uring_cqe_seen$MH();
        try {
            mh$.invokeExact(ring, cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sqe_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_sqe_set_data$MH,"io_uring_sqe_set_data");
    }
    public static void io_uring_sqe_set_data ( Addressable sqe,  Addressable data) {
        var mh$ = io_uring_sqe_set_data$MH();
        try {
            mh$.invokeExact(sqe, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cqe_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_cqe_get_data$MH,"io_uring_cqe_get_data");
    }
    public static MemoryAddress io_uring_cqe_get_data ( Addressable cqe) {
        var mh$ = io_uring_cqe_get_data$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sqe_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_sqe_set_flags$MH,"io_uring_sqe_set_flags");
    }
    public static void io_uring_sqe_set_flags ( Addressable sqe,  int flags) {
        var mh$ = io_uring_sqe_set_flags$MH();
        try {
            mh$.invokeExact(sqe, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_rw$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_prep_rw$MH,"io_uring_prep_rw");
    }
    public static void io_uring_prep_rw ( int op,  Addressable sqe,  int fd,  Addressable addr,  int len,  long offset) {
//        var mh$ = io_uring_prep_rw$MH();
//        try {
//            mh$.invokeExact(op, sqe, fd, addr, len, offset);
//        } catch (Throwable ex$) {
//            throw new AssertionError("should not reach here", ex$);
//        }
        MemorySegment sqeSegment = MemorySegment.ofAddress(sqe.address(), io_uring_sqe.sizeof(), MemorySession.global());
        io_uring_sqe.opcode$set(sqeSegment, (byte) op);
        io_uring_sqe.flags$set(sqeSegment, (byte) 0);
        io_uring_sqe.ioprio$set(sqeSegment,(short) 0);
        io_uring_sqe.fd$set(sqeSegment, fd);
        io_uring_sqe.off$set(sqeSegment, offset);
        io_uring_sqe.addr$set(sqeSegment, addr.address().toRawLongValue());
        io_uring_sqe.len$set(sqeSegment, len);
        io_uring_sqe.rw_flags$set(sqeSegment, 0);
        io_uring_sqe.user_data$set(sqeSegment, 0);

        MemorySegment __pad = io_uring_sqe.__pad2$slice(sqeSegment);
        for (int i = 0; i < 3; i++) {
            __pad.setAtIndex(C_LONG_LONG, i,0);
        }
    }
    public static MethodHandle io_uring_prep_readv$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_prep_readv$MH,"io_uring_prep_readv");
    }
    public static void io_uring_prep_readv ( Addressable sqe,  int fd,  Addressable iovecs,  int nr_vecs,  long offset) {
//        var mh$ = io_uring_prep_readv$MH();
//        try {
//            mh$.invokeExact(sqe, fd, iovecs, nr_vecs, offset);
//        } catch (Throwable ex$) {
//            throw new AssertionError("should not reach here", ex$);
//        }
        io_uring_prep_rw(IORING_OP_READV(), sqe, fd,iovecs, nr_vecs, offset);
    }
    public static MethodHandle io_uring_prep_read_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$23.io_uring_prep_read_fixed$MH,"io_uring_prep_read_fixed");
    }
    public static void io_uring_prep_read_fixed ( Addressable sqe,  int fd,  Addressable buf,  int nbytes,  long offset,  int buf_index) {
        var mh$ = io_uring_prep_read_fixed$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset, buf_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_writev$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_prep_writev$MH,"io_uring_prep_writev");
    }
    public static void io_uring_prep_writev ( Addressable sqe,  int fd,  Addressable iovecs,  int nr_vecs,  long offset) {
//        var mh$ = io_uring_prep_writev$MH();
//        try {
//            mh$.invokeExact(sqe, fd, iovecs, nr_vecs, offset);
//        } catch (Throwable ex$) {
//            throw new AssertionError("should not reach here", ex$);
//        }
        io_uring_prep_rw(IORING_OP_WRITEV(), sqe,fd,iovecs,nr_vecs,offset);
    }
    public static MethodHandle io_uring_prep_write_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_prep_write_fixed$MH,"io_uring_prep_write_fixed");
    }
    public static void io_uring_prep_write_fixed ( Addressable sqe,  int fd,  Addressable buf,  int nbytes,  long offset,  int buf_index) {
        var mh$ = io_uring_prep_write_fixed$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset, buf_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_prep_recvmsg$MH,"io_uring_prep_recvmsg");
    }
    public static void io_uring_prep_recvmsg ( Addressable sqe,  int fd,  Addressable msg,  int flags) {
        var mh$ = io_uring_prep_recvmsg$MH();
        try {
            mh$.invokeExact(sqe, fd, msg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_prep_sendmsg$MH,"io_uring_prep_sendmsg");
    }
    public static void io_uring_prep_sendmsg ( Addressable sqe,  int fd,  Addressable msg,  int flags) {
        var mh$ = io_uring_prep_sendmsg$MH();
        try {
            mh$.invokeExact(sqe, fd, msg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_poll_add$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_prep_poll_add$MH,"io_uring_prep_poll_add");
    }
    public static void io_uring_prep_poll_add ( Addressable sqe,  int fd,  short poll_mask) {
        var mh$ = io_uring_prep_poll_add$MH();
        try {
            mh$.invokeExact(sqe, fd, poll_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_poll_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$24.io_uring_prep_poll_remove$MH,"io_uring_prep_poll_remove");
    }
    public static void io_uring_prep_poll_remove ( Addressable sqe,  Addressable user_data) {
        var mh$ = io_uring_prep_poll_remove$MH();
        try {
            mh$.invokeExact(sqe, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_prep_fsync$MH,"io_uring_prep_fsync");
    }
    public static void io_uring_prep_fsync ( Addressable sqe,  int fd,  int fsync_flags) {
        var mh$ = io_uring_prep_fsync$MH();
        try {
            mh$.invokeExact(sqe, fd, fsync_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_nop$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_prep_nop$MH,"io_uring_prep_nop");
    }
    public static void io_uring_prep_nop ( Addressable sqe) {
        var mh$ = io_uring_prep_nop$MH();
        try {
            mh$.invokeExact(sqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_prep_timeout$MH,"io_uring_prep_timeout");
    }
    public static void io_uring_prep_timeout ( Addressable sqe,  Addressable ts,  int count,  int flags) {
        var mh$ = io_uring_prep_timeout$MH();
        try {
            mh$.invokeExact(sqe, ts, count, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_timeout_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_prep_timeout_remove$MH,"io_uring_prep_timeout_remove");
    }
    public static void io_uring_prep_timeout_remove ( Addressable sqe,  long user_data,  int flags) {
        var mh$ = io_uring_prep_timeout_remove$MH();
        try {
            mh$.invokeExact(sqe, user_data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_prep_accept$MH,"io_uring_prep_accept");
    }
    public static void io_uring_prep_accept ( Addressable sqe,  int fd,  Addressable addr,  Addressable addrlen,  int flags) {
        var mh$ = io_uring_prep_accept$MH();
        try {
            mh$.invokeExact(sqe, fd, addr, addrlen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sq_space_left$MH() {
        return RuntimeHelper.requireNonNull(constants$25.io_uring_sq_space_left$MH,"io_uring_sq_space_left");
    }
    public static int io_uring_sq_space_left ( Addressable ring) {
        var mh$ = io_uring_sq_space_left$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cq_ready$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_cq_ready$MH,"io_uring_cq_ready");
    }
    public static int io_uring_cq_ready ( Addressable ring) {
        var mh$ = io_uring_cq_ready$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_peek_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__io_uring_peek_cqe$MH,"__io_uring_peek_cqe");
    }

    /**
     *
     * @param ring ring对象
     * @param cqe_ptr 二重指针
     * @return
     */
    public static int __io_uring_peek_cqe ( Addressable ring,  Addressable cqe_ptr) {
        var mh$ = __io_uring_peek_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }

    }
    public static MethodHandle io_uring_peek_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_peek_cqe$MH,"io_uring_peek_cqe");
    }
    public static int io_uring_peek_cqe ( Addressable ring,  Addressable cqe_ptr) {
        var mh$ = io_uring_peek_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$26.io_uring_wait_cqe$MH,"io_uring_wait_cqe");
    }
    public static int io_uring_wait_cqe ( Addressable ring,  Addressable cqe_ptr) {
        var mh$ = io_uring_wait_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$26.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int PF_UNIX() {
        return (int)1L;
    }
    public static int PF_FILE() {
        return (int)1L;
    }
    public static int PF_ROUTE() {
        return (int)16L;
    }
    public static int AF_UNSPEC() {
        return (int)0L;
    }
    public static int AF_LOCAL() {
        return (int)1L;
    }
    public static int AF_UNIX() {
        return (int)1L;
    }
    public static int AF_FILE() {
        return (int)1L;
    }
    public static int AF_INET() {
        return (int)2L;
    }
    public static int AF_AX25() {
        return (int)3L;
    }
    public static int AF_IPX() {
        return (int)4L;
    }
    public static int AF_APPLETALK() {
        return (int)5L;
    }
    public static int AF_NETROM() {
        return (int)6L;
    }
    public static int AF_BRIDGE() {
        return (int)7L;
    }
    public static int AF_ATMPVC() {
        return (int)8L;
    }
    public static int AF_X25() {
        return (int)9L;
    }
    public static int AF_INET6() {
        return (int)10L;
    }
    public static int AF_ROSE() {
        return (int)11L;
    }
    public static int AF_DECnet() {
        return (int)12L;
    }
    public static int AF_NETBEUI() {
        return (int)13L;
    }
    public static int AF_SECURITY() {
        return (int)14L;
    }
    public static int AF_KEY() {
        return (int)15L;
    }
    public static int AF_NETLINK() {
        return (int)16L;
    }
    public static int AF_ROUTE() {
        return (int)16L;
    }
    public static int AF_PACKET() {
        return (int)17L;
    }
    public static int AF_ASH() {
        return (int)18L;
    }
    public static int AF_ECONET() {
        return (int)19L;
    }
    public static int AF_ATMSVC() {
        return (int)20L;
    }
    public static int AF_RDS() {
        return (int)21L;
    }
    public static int AF_SNA() {
        return (int)22L;
    }
    public static int AF_IRDA() {
        return (int)23L;
    }
    public static int AF_PPPOX() {
        return (int)24L;
    }
    public static int AF_WANPIPE() {
        return (int)25L;
    }
    public static int AF_LLC() {
        return (int)26L;
    }
    public static int AF_IB() {
        return (int)27L;
    }
    public static int AF_MPLS() {
        return (int)28L;
    }
    public static int AF_CAN() {
        return (int)29L;
    }
    public static int AF_TIPC() {
        return (int)30L;
    }
    public static int AF_BLUETOOTH() {
        return (int)31L;
    }
    public static int AF_IUCV() {
        return (int)32L;
    }
    public static int AF_RXRPC() {
        return (int)33L;
    }
    public static int AF_ISDN() {
        return (int)34L;
    }
    public static int AF_PHONET() {
        return (int)35L;
    }
    public static int AF_IEEE802154() {
        return (int)36L;
    }
    public static int AF_CAIF() {
        return (int)37L;
    }
    public static int AF_ALG() {
        return (int)38L;
    }
    public static int AF_NFC() {
        return (int)39L;
    }
    public static int AF_VSOCK() {
        return (int)40L;
    }
    public static int AF_KCM() {
        return (int)41L;
    }
    public static int AF_QIPCRTR() {
        return (int)42L;
    }
    public static int AF_SMC() {
        return (int)43L;
    }
    public static int AF_XDP() {
        return (int)44L;
    }
    public static int AF_MAX() {
        return (int)45L;
    }
    public static long __SOCKADDR_COMMON_SIZE() {
        return 2L;
    }
    public static long _SS_PADSIZE() {
        return 118L;
    }
    public static int SO_GET_FILTER() {
        return (int)26L;
    }
    public static int SCM_WIFI_STATUS() {
        return (int)41L;
    }
    public static int SO_DETACH_BPF() {
        return (int)27L;
    }
    public static int SCM_TXTIME() {
        return (int)61L;
    }
    public static int SO_TIMESTAMP() {
        return (int)29L;
    }
    public static int SO_TIMESTAMPNS() {
        return (int)35L;
    }
    public static int SO_TIMESTAMPING() {
        return (int)37L;
    }
    public static int SO_RCVTIMEO() {
        return (int)20L;
    }
    public static int SO_SNDTIMEO() {
        return (int)21L;
    }
    public static int SCM_TIMESTAMP() {
        return (int)29L;
    }
    public static int SCM_TIMESTAMPNS() {
        return (int)35L;
    }
    public static int SCM_TIMESTAMPING() {
        return (int)37L;
    }
    public static int UIO_MAXIOV() {
        return (int)1024L;
    }
    public static MemoryAddress SIG_ERR() {
        return constants$26.SIG_ERR$ADDR;
    }
    public static MemoryAddress SIG_DFL() {
        return constants$27.SIG_DFL$ADDR;
    }
    public static MemoryAddress SIG_IGN() {
        return constants$27.SIG_IGN$ADDR;
    }
    public static int SIGIO() {
        return (int)29L;
    }
    public static int SIGIOT() {
        return (int)6L;
    }
    public static int SIGCLD() {
        return (int)17L;
    }
    public static int _NSIG() {
        return (int)65L;
    }
    public static long __SI_PAD_SIZE() {
        return 28L;
    }
    public static long __SIGEV_PAD_SIZE() {
        return 12L;
    }
    public static int NSIG() {
        return (int)65L;
    }
    public static int SA_RESETHAND() {
        return (int)2147483648L;
    }
    public static int SA_NOMASK() {
        return (int)1073741824L;
    }
    public static int SA_ONESHOT() {
        return (int)2147483648L;
    }
    public static int SA_STACK() {
        return (int)134217728L;
    }
    public static int FP_XSTATE_MAGIC1() {
        return (int)1179670611L;
    }
    public static int FP_XSTATE_MAGIC2() {
        return (int)1179670597L;
    }
    public static long FP_XSTATE_MAGIC2_SIZE() {
        return 4L;
    }
    public static int NGREG() {
        return (int)23L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$27.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$27.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$27.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$27.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$28.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$28.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$28.PRIdLEAST8$SEGMENT;
    }
}


